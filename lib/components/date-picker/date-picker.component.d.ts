import { ButtonComponent } from '../button/button.component';
import { FieldComponent, FieldVariant } from '../field/field.component';
import { MaterialDesignValueAccessorComponent } from '../material-design-value-accessor.component';
import { OpenCloseState } from '../../common/rxjs/open-close';
import { ListItemComponent } from '../list-item/list-item.component';
import { DialogComponent } from '../dialog/dialog.component';
import * as i0 from "@angular/core";
export type DatePickerVariant = 'embedded' | 'dropdown' | 'dialog';
interface Day {
    day: number;
    type: string;
    date: Date;
}
type ValueType = [string | undefined, string | undefined] | string | undefined;
export declare class DatePickerComponent extends MaterialDesignValueAccessorComponent<ValueType> {
    readonly range: import("@angular/core").ModelSignal<boolean>;
    readonly variant: import("@angular/core").ModelSignal<DatePickerVariant>;
    readonly fieldVariant: import("@angular/core").ModelSignal<FieldVariant>;
    readonly prefix: import("@angular/core").ModelSignal<string | undefined>;
    readonly suffix: import("@angular/core").ModelSignal<string | undefined>;
    readonly label: import("@angular/core").ModelSignal<string | undefined>;
    readonly field: import("@angular/core").Signal<FieldComponent<ValueType> | undefined>;
    readonly dialog: import("@angular/core").Signal<DialogComponent | undefined>;
    readonly populated: import("@angular/core").Signal<boolean>;
    private readonly _today;
    readonly value: import("@angular/core").ModelSignal<ValueType>;
    readonly selectionValue: import("@angular/core").ModelSignal<ValueType>;
    readonly canOkay: import("@angular/core").Signal<boolean>;
    get fromValueAsDate(): Date | undefined;
    set fromValueAsDate(value: Date | undefined);
    get toValueAsDate(): Date | undefined;
    set toValueAsDate(value: Date | undefined);
    get fromSelectedValueAsDate(): Date | undefined;
    set fromSelectedValueAsDate(value: Date | undefined);
    get toSelectedValueAsDate(): Date | undefined;
    set toSelectedValueAsDate(value: Date | undefined);
    readonly locale: import("@angular/core").ModelSignal<string>;
    readonly monthItems: import("@angular/core").Signal<readonly ListItemComponent[]>;
    readonly monthView: import("@angular/core").ModelSignal<number>;
    readonly monthViewText: import("@angular/core").Signal<string>;
    readonly months: import("@angular/core").Signal<{
        text: string;
        value: number;
    }[]>;
    readonly monthViewOpen: import("@angular/core").WritableSignal<boolean>;
    readonly monthViewState: import("@angular/core").Signal<OpenCloseState>;
    readonly yearItems: import("@angular/core").Signal<readonly ButtonComponent[]>;
    readonly yearView: import("@angular/core").ModelSignal<number>;
    readonly yearViewText: import("@angular/core").Signal<string>;
    get years(): number[];
    readonly yearViewOpen: import("@angular/core").WritableSignal<boolean>;
    readonly yearViewState: import("@angular/core").Signal<OpenCloseState>;
    readonly dayNames: import("@angular/core").Signal<string[]>;
    readonly days: import("@angular/core").Signal<Day[]>;
    private fromSelection;
    constructor();
    openMonthView(): void;
    monthItemClick(month: number): void;
    openYearView(): void;
    yearItemClick(year: number): void;
    todayClick(): void;
    dayClick(day: Day): void;
    isDateEqual(dateA?: Date, dateB?: Date): boolean;
    isToday(date: Date): boolean;
    isDaySelected(date: Date): boolean;
    isInRange(date: Date): boolean;
    clearClick(): void;
    okayClick(): void;
    cancelClick(): void;
    bodyClick(): void;
    popoverStateChange(state: OpenCloseState): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DatePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DatePickerComponent, "md-date-picker", never, { "range": { "alias": "range"; "required": false; "isSignal": true; }; "variant": { "alias": "variant"; "required": false; "isSignal": true; }; "fieldVariant": { "alias": "fieldVariant"; "required": false; "isSignal": true; }; "prefix": { "alias": "prefix"; "required": false; "isSignal": true; }; "suffix": { "alias": "suffix"; "required": false; "isSignal": true; }; "label": { "alias": "label"; "required": false; "isSignal": true; }; "value": { "alias": "value"; "required": false; "isSignal": true; }; "selectionValue": { "alias": "selectionValue"; "required": false; "isSignal": true; }; "locale": { "alias": "locale"; "required": false; "isSignal": true; }; "monthView": { "alias": "monthView"; "required": false; "isSignal": true; }; "yearView": { "alias": "yearView"; "required": false; "isSignal": true; }; }, { "range": "rangeChange"; "variant": "variantChange"; "fieldVariant": "fieldVariantChange"; "prefix": "prefixChange"; "suffix": "suffixChange"; "label": "labelChange"; "value": "valueChange"; "selectionValue": "selectionValueChange"; "locale": "localeChange"; "monthView": "monthViewChange"; "yearView": "yearViewChange"; }, never, never, true, never>;
}
export {};
