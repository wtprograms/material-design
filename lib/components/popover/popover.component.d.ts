import { OnDestroy } from '@angular/core';
import { MaterialDesignComponent } from '../material-design.component';
import { AttachableDirective } from '../../directives/attachable.directive';
import { Placement, Strategy } from '@floating-ui/dom';
import { AnimationTriggers } from '../../directives/animation/animation-context.directive';
import { OpenCloseState } from '../../common/rxjs/open-close';
import * as i0 from "@angular/core";
import * as i1 from "../../directives/animation/animation-context.directive";
import * as i2 from "../../directives/attachable.directive";
export type PopoverTrigger = 'manual' | 'click' | 'hover' | 'contextmenu';
export declare class PopoverComponent extends MaterialDesignComponent implements OnDestroy {
    readonly attachableDirective: AttachableDirective;
    readonly trigger: import("@angular/core").ModelSignal<PopoverTrigger>;
    readonly flip: import("@angular/core").ModelSignal<boolean>;
    readonly shift: import("@angular/core").ModelSignal<boolean>;
    readonly offset: import("@angular/core").ModelSignal<number>;
    readonly delay: import("@angular/core").ModelSignal<number>;
    readonly placement: import("@angular/core").ModelSignal<Placement>;
    readonly strategy: import("@angular/core").ModelSignal<Strategy>;
    readonly native: import("@angular/core").ModelSignal<boolean>;
    readonly open: import("@angular/core").ModelSignal<boolean>;
    readonly manualClose: import("@angular/core").ModelSignal<boolean>;
    readonly useContainerWidth: import("@angular/core").ModelSignal<boolean>;
    readonly containerWidth: import("@angular/core").Signal<string | null>;
    private readonly _position;
    private readonly _display;
    private readonly _opacity;
    private readonly _document;
    private readonly _documentClick$;
    private readonly _cancelTimer;
    private readonly _events$;
    private readonly _openClose$;
    readonly state: import("@angular/core").Signal<OpenCloseState>;
    readonly stateChange: import("@angular/core").OutputEmitterRef<OpenCloseState>;
    readonly hostStyle: import("@angular/core").Signal<Partial<CSSStyleDeclaration>>;
    readonly transformOrigin: import("@angular/core").Signal<"" | "top" | "bottom">;
    readonly animationTriggers: AnimationTriggers;
    private readonly _platformId;
    private _cancelAutoUpdate?;
    private _destroyRef;
    private _closing;
    constructor();
    ngOnDestroy(): void;
    private updatePosition;
    onClosePopover(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PopoverComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PopoverComponent, "md-popover", never, { "trigger": { "alias": "trigger"; "required": false; "isSignal": true; }; "flip": { "alias": "flip"; "required": false; "isSignal": true; }; "shift": { "alias": "shift"; "required": false; "isSignal": true; }; "offset": { "alias": "offset"; "required": false; "isSignal": true; }; "delay": { "alias": "delay"; "required": false; "isSignal": true; }; "placement": { "alias": "placement"; "required": false; "isSignal": true; }; "strategy": { "alias": "strategy"; "required": false; "isSignal": true; }; "native": { "alias": "native"; "required": false; "isSignal": true; }; "open": { "alias": "open"; "required": false; "isSignal": true; }; "manualClose": { "alias": "manualClose"; "required": false; "isSignal": true; }; "useContainerWidth": { "alias": "useContainerWidth"; "required": false; "isSignal": true; }; }, { "trigger": "triggerChange"; "flip": "flipChange"; "shift": "shiftChange"; "offset": "offsetChange"; "delay": "delayChange"; "placement": "placementChange"; "strategy": "strategyChange"; "native": "nativeChange"; "open": "openChange"; "manualClose": "manualCloseChange"; "useContainerWidth": "useContainerWidthChange"; "stateChange": "stateChange"; }, never, never, true, [{ directive: typeof i1.AnimationContextDirective; inputs: {}; outputs: {}; }, { directive: typeof i2.AttachableDirective; inputs: { "target": "target"; }; outputs: {}; }]>;
}
