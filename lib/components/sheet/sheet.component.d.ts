import { MaterialDesignComponent } from '../material-design.component';
import { OpenCloseState } from '../../common/rxjs/open-close';
import { SlotDirective } from '../../directives/slot.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../directives/animation/animation-context.directive";
import * as i2 from "../../directives/animation/animation.directive";
export type SheetPosition = 'top' | 'end' | 'bottom' | 'start';
export declare class SheetComponent extends MaterialDesignComponent {
    readonly modal: import("@angular/core").ModelSignal<boolean>;
    readonly open: import("@angular/core").ModelSignal<boolean>;
    readonly returnValue: import("@angular/core").ModelSignal<string | undefined>;
    readonly cancel: import("@angular/core").OutputEmitterRef<void>;
    readonly position: import("@angular/core").ModelSignal<SheetPosition>;
    readonly maxWidth: import("@angular/core").ModelSignal<number | undefined>;
    readonly iconSlot: import("@angular/core").Signal<SlotDirective | undefined>;
    readonly headlineSlot: import("@angular/core").Signal<SlotDirective | undefined>;
    readonly supportingtext: import("@angular/core").Signal<SlotDirective | undefined>;
    readonly actionSlot: import("@angular/core").Signal<SlotDirective | undefined>;
    readonly maxWidthPx: import("@angular/core").Signal<string>;
    readonly maxHeight: import("@angular/core").ModelSignal<number | undefined>;
    readonly maxHeightPx: import("@angular/core").Signal<string>;
    private readonly _openClose$;
    readonly state: import("@angular/core").Signal<OpenCloseState>;
    readonly stateChange: import("@angular/core").OutputEmitterRef<OpenCloseState>;
    private readonly _embeddedAnimations;
    private readonly _dialog;
    private getTranslate;
    private readonly _dialogAnimations;
    private _isModalOpen;
    constructor();
    private readonly _document;
    private _nextClickIsFromContent;
    private _escapePressedWithoutCancel;
    onDialogCancel(event: Event): void;
    onDialogClose(): void;
    onDialogKeyDown(event: KeyboardEvent): void;
    onDialogClick(): void;
    onContainerContentClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SheetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SheetComponent, "md-sheet", never, { "modal": { "alias": "modal"; "required": false; "isSignal": true; }; "open": { "alias": "open"; "required": false; "isSignal": true; }; "returnValue": { "alias": "returnValue"; "required": false; "isSignal": true; }; "position": { "alias": "position"; "required": false; "isSignal": true; }; "maxWidth": { "alias": "maxWidth"; "required": false; "isSignal": true; }; "maxHeight": { "alias": "maxHeight"; "required": false; "isSignal": true; }; }, { "modal": "modalChange"; "open": "openChange"; "returnValue": "returnValueChange"; "cancel": "cancel"; "position": "positionChange"; "maxWidth": "maxWidthChange"; "maxHeight": "maxHeightChange"; "stateChange": "stateChange"; }, never, never, true, [{ directive: typeof i1.AnimationContextDirective; inputs: {}; outputs: {}; }, { directive: typeof i2.AnimationDirective; inputs: {}; outputs: {}; }]>;
}
