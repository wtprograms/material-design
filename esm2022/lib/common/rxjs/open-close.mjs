import { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';
import { filter, map, merge, of, Subject, switchMap, takeUntil, tap, timer, } from 'rxjs';
import { durationToMilliseconds } from '../motion/duration';
import { DestroyRef, inject, isSignal } from '@angular/core';
export function openClose(openTrigger, openingDelay = 'short4', closingDelay) {
    closingDelay ??= openingDelay;
    const destroyRef = inject(DestroyRef);
    const _cancelTimer = new Subject();
    let lastState = 'closed';
    if (isSignal(openTrigger)) {
        openTrigger = toObservable(openTrigger);
    }
    return openTrigger.pipe(takeUntilDestroyed(destroyRef), switchMap((open) => {
        let state = lastState;
        if (!open && state === 'opening') {
            _cancelTimer.next();
            state = 'opened';
        }
        if (open && state === 'closing') {
            _cancelTimer.next();
            state = 'closed';
        }
        if (open && state === 'closed') {
            return merge(of('opening'), timer(durationToMilliseconds(openingDelay) ?? 50).pipe(takeUntilDestroyed(destroyRef), takeUntil(_cancelTimer), map(() => 'opened')));
        }
        if (!open && state === 'opened') {
            return merge(of('closing'), timer(durationToMilliseconds(closingDelay) ?? 50).pipe(takeUntilDestroyed(destroyRef), takeUntil(_cancelTimer), map(() => 'closed')));
        }
        return of({});
    }), filter((state) => typeof state === 'string'), tap((state) => (lastState = state)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi1jbG9zZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3d0cHJvZ3JhbXMvbWF0ZXJpYWwtZGVzaWduL3NyYy9saWIvY29tbW9uL3J4anMvb3Blbi1jbG9zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUUsT0FBTyxFQUNMLE1BQU0sRUFDTixHQUFHLEVBQ0gsS0FBSyxFQUVMLEVBQUUsRUFDRixPQUFPLEVBQ1AsU0FBUyxFQUNULFNBQVMsRUFDVCxHQUFHLEVBQ0gsS0FBSyxHQUNOLE1BQU0sTUFBTSxDQUFDO0FBQ2QsT0FBTyxFQUFZLHNCQUFzQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBSXJFLE1BQU0sVUFBVSxTQUFTLENBQ3ZCLFdBQWtELEVBQ2xELGVBQWtDLFFBQVEsRUFDMUMsWUFBZ0M7SUFFaEMsWUFBWSxLQUFLLFlBQVksQ0FBQztJQUM5QixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUN6QyxJQUFJLFNBQVMsR0FBbUIsUUFBUSxDQUFDO0lBQ3pDLElBQUksUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7UUFDMUIsV0FBVyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUNyQixrQkFBa0IsQ0FBQyxVQUFVLENBQUMsRUFDOUIsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDakIsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ2pDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQ25CLENBQUM7UUFDRCxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDaEMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3BCLEtBQUssR0FBRyxRQUFRLENBQUM7UUFDbkIsQ0FBQztRQUVELElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUMvQixPQUFPLEtBQUssQ0FDVixFQUFFLENBQWlCLFNBQVMsQ0FBQyxFQUM3QixLQUFLLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUNwRCxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsRUFDOUIsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUN2QixHQUFHLENBQUMsR0FBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUNwQyxDQUNGLENBQUM7UUFDSixDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDaEMsT0FBTyxLQUFLLENBQ1YsRUFBRSxDQUFpQixTQUFTLENBQUMsRUFDN0IsS0FBSyxDQUFDLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDcEQsa0JBQWtCLENBQUMsVUFBVSxDQUFDLEVBQzlCLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFDdkIsR0FBRyxDQUFDLEdBQW1CLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FDcEMsQ0FDRixDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hCLENBQUMsQ0FBQyxFQUNGLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBMkIsRUFBRSxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxFQUNyRSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQ3BDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGFrZVVudGlsRGVzdHJveWVkLCB0b09ic2VydmFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQge1xuICBmaWx0ZXIsXG4gIG1hcCxcbiAgbWVyZ2UsXG4gIE9ic2VydmFibGUsXG4gIG9mLFxuICBTdWJqZWN0LFxuICBzd2l0Y2hNYXAsXG4gIHRha2VVbnRpbCxcbiAgdGFwLFxuICB0aW1lcixcbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEdXJhdGlvbiwgZHVyYXRpb25Ub01pbGxpc2Vjb25kcyB9IGZyb20gJy4uL21vdGlvbi9kdXJhdGlvbic7XG5pbXBvcnQgeyBEZXN0cm95UmVmLCBpbmplY3QsIGlzU2lnbmFsLCBTaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IHR5cGUgT3BlbkNsb3NlU3RhdGUgPSAnY2xvc2VkJyB8ICdpbml0LW9wZW5pbmcnIHwgJ29wZW5pbmcnIHwgJ29wZW5lZCcgfCAnaW5pdC1jbG9zaW5nJyB8ICdjbG9zaW5nJztcblxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5DbG9zZShcbiAgb3BlblRyaWdnZXI6IE9ic2VydmFibGU8Ym9vbGVhbj4gfCBTaWduYWw8Ym9vbGVhbj4sXG4gIG9wZW5pbmdEZWxheTogRHVyYXRpb24gfCBudW1iZXIgPSAnc2hvcnQ0JyxcbiAgY2xvc2luZ0RlbGF5PzogRHVyYXRpb24gfCBudW1iZXJcbikge1xuICBjbG9zaW5nRGVsYXkgPz89IG9wZW5pbmdEZWxheTtcbiAgY29uc3QgZGVzdHJveVJlZiA9IGluamVjdChEZXN0cm95UmVmKTtcbiAgY29uc3QgX2NhbmNlbFRpbWVyID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgbGV0IGxhc3RTdGF0ZTogT3BlbkNsb3NlU3RhdGUgPSAnY2xvc2VkJztcbiAgaWYgKGlzU2lnbmFsKG9wZW5UcmlnZ2VyKSkge1xuICAgIG9wZW5UcmlnZ2VyID0gdG9PYnNlcnZhYmxlKG9wZW5UcmlnZ2VyKTtcbiAgfVxuICByZXR1cm4gb3BlblRyaWdnZXIucGlwZShcbiAgICB0YWtlVW50aWxEZXN0cm95ZWQoZGVzdHJveVJlZiksXG4gICAgc3dpdGNoTWFwKChvcGVuKSA9PiB7XG4gICAgICBsZXQgc3RhdGUgPSBsYXN0U3RhdGU7XG4gICAgICBpZiAoIW9wZW4gJiYgc3RhdGUgPT09ICdvcGVuaW5nJykge1xuICAgICAgICBfY2FuY2VsVGltZXIubmV4dCgpO1xuICAgICAgICBzdGF0ZSA9ICdvcGVuZWQnO1xuICAgICAgfVxuICAgICAgaWYgKG9wZW4gJiYgc3RhdGUgPT09ICdjbG9zaW5nJykge1xuICAgICAgICBfY2FuY2VsVGltZXIubmV4dCgpO1xuICAgICAgICBzdGF0ZSA9ICdjbG9zZWQnO1xuICAgICAgfVxuXG4gICAgICBpZiAob3BlbiAmJiBzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICAgIG9mPE9wZW5DbG9zZVN0YXRlPignb3BlbmluZycpLFxuICAgICAgICAgIHRpbWVyKGR1cmF0aW9uVG9NaWxsaXNlY29uZHMob3BlbmluZ0RlbGF5KSA/PyA1MCkucGlwZShcbiAgICAgICAgICAgIHRha2VVbnRpbERlc3Ryb3llZChkZXN0cm95UmVmKSxcbiAgICAgICAgICAgIHRha2VVbnRpbChfY2FuY2VsVGltZXIpLFxuICAgICAgICAgICAgbWFwKCgpOiBPcGVuQ2xvc2VTdGF0ZSA9PiAnb3BlbmVkJylcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIW9wZW4gJiYgc3RhdGUgPT09ICdvcGVuZWQnKSB7XG4gICAgICAgIHJldHVybiBtZXJnZShcbiAgICAgICAgICBvZjxPcGVuQ2xvc2VTdGF0ZT4oJ2Nsb3NpbmcnKSxcbiAgICAgICAgICB0aW1lcihkdXJhdGlvblRvTWlsbGlzZWNvbmRzKGNsb3NpbmdEZWxheSkgPz8gNTApLnBpcGUoXG4gICAgICAgICAgICB0YWtlVW50aWxEZXN0cm95ZWQoZGVzdHJveVJlZiksXG4gICAgICAgICAgICB0YWtlVW50aWwoX2NhbmNlbFRpbWVyKSxcbiAgICAgICAgICAgIG1hcCgoKTogT3BlbkNsb3NlU3RhdGUgPT4gJ2Nsb3NlZCcpXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9mKHt9KTtcbiAgICB9KSxcbiAgICBmaWx0ZXIoKHN0YXRlKTogc3RhdGUgaXMgT3BlbkNsb3NlU3RhdGUgPT4gdHlwZW9mIHN0YXRlID09PSAnc3RyaW5nJyksXG4gICAgdGFwKChzdGF0ZSkgPT4gKGxhc3RTdGF0ZSA9IHN0YXRlKSlcbiAgKTtcbn1cbiJdfQ==