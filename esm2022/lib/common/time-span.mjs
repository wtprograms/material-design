export class TimeSpan {
    _hours;
    _minutes;
    _seconds;
    constructor(hours, minutes, seconds) {
        this._hours = hours ?? 0;
        this._minutes = minutes ?? 0;
        this._seconds = seconds ?? 0;
        this.normalize();
    }
    normalize() {
        if (this._seconds >= 60) {
            this._minutes += Math.floor(this._seconds / 60);
            this._seconds = this._seconds % 60;
        }
        if (this._minutes >= 60) {
            this._hours += Math.floor(this._minutes / 60);
            this._minutes = this._minutes % 60;
        }
    }
    set hours(value) {
        this._hours = value;
        this.normalize();
    }
    get hours() {
        return this._hours;
    }
    set minutes(value) {
        this._minutes = value;
        this.normalize();
    }
    get minutes() {
        return this._minutes;
    }
    set seconds(value) {
        this._seconds = value;
        this.normalize();
    }
    get seconds() {
        return this._seconds;
    }
    get totalSeconds() {
        return this._hours * 3600 + this._minutes * 60 + this._seconds;
    }
    toString(options) {
        options ??= {
            hours: true,
            seconds: true,
        };
        const hours = options?.hours ? `${this.hours}:` : '';
        const seconds = options?.seconds ? `:${this.seconds}` : '';
        return `${hours}${this.minutes}${seconds}`;
    }
    static parse(timeString) {
        const [hours, minutes, seconds] = timeString.split(':').map(Number);
        return new TimeSpan(hours ?? 0, minutes ?? 0, seconds ?? 0);
    }
    static fromSeconds(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = seconds % 60;
        return new TimeSpan(hours, minutes, remainingSeconds);
    }
    static fromDate(date) {
        return new TimeSpan(date.getHours(), date.getMinutes(), date.getSeconds());
    }
    compare(other) {
        if (this.totalSeconds < other.totalSeconds) {
            return -1;
        }
        else if (this.totalSeconds > other.totalSeconds) {
            return 1;
        }
        return 0;
    }
    min(other) {
        return this.compare(other) < 0 ? this : other;
    }
    max(other) {
        return this.compare(other) > 0 ? this : other;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1zcGFuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvd3Rwcm9ncmFtcy9tYXRlcmlhbC1kZXNpZ24vc3JjL2xpYi9jb21tb24vdGltZS1zcGFuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxRQUFRO0lBQ1gsTUFBTSxDQUFTO0lBQ2YsUUFBUSxDQUFTO0lBQ2pCLFFBQVEsQ0FBUztJQUV6QixZQUFZLEtBQWMsRUFBRSxPQUFnQixFQUFFLE9BQWdCO1FBQzVELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sSUFBSSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU8sU0FBUztRQUNmLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLEVBQUUsQ0FBQztZQUN4QixJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ3JDLENBQUM7UUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNyQyxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFD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O1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDaEQsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2hELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUaW1lU3BhbiB7XG4gIHByaXZhdGUgX2hvdXJzOiBudW1iZXI7XG4gIHByaXZhdGUgX21pbnV0ZXM6IG51bWJlcjtcbiAgcHJpdmF0ZSBfc2Vjb25kczogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGhvdXJzPzogbnVtYmVyLCBtaW51dGVzPzogbnVtYmVyLCBzZWNvbmRzPzogbnVtYmVyKSB7XG4gICAgdGhpcy5faG91cnMgPSBob3VycyA/PyAwO1xuICAgIHRoaXMuX21pbnV0ZXMgPSBtaW51dGVzID8/IDA7XG4gICAgdGhpcy5fc2Vjb25kcyA9IHNlY29uZHMgPz8gMDtcbiAgICB0aGlzLm5vcm1hbGl6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBub3JtYWxpemUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3NlY29uZHMgPj0gNjApIHtcbiAgICAgIHRoaXMuX21pbnV0ZXMgKz0gTWF0aC5mbG9vcih0aGlzLl9zZWNvbmRzIC8gNjApO1xuICAgICAgdGhpcy5fc2Vjb25kcyA9IHRoaXMuX3NlY29uZHMgJSA2MDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbWludXRlcyA+PSA2MCkge1xuICAgICAgdGhpcy5faG91cnMgKz0gTWF0aC5mbG9vcih0aGlzLl9taW51dGVzIC8gNjApO1xuICAgICAgdGhpcy5fbWludXRlcyA9IHRoaXMuX21pbnV0ZXMgJSA2MDtcbiAgICB9XG4gIH1cblxuICBzZXQgaG91cnModmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2hvdXJzID0gdmFsdWU7XG4gICAgdGhpcy5ub3JtYWxpemUoKTtcbiAgfVxuXG4gIGdldCBob3VycygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9ob3VycztcbiAgfVxuXG4gIHNldCBtaW51dGVzKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9taW51dGVzID0gdmFsdWU7XG4gICAgdGhpcy5ub3JtYWxpemUoKTtcbiAgfVxuXG4gIGdldCBtaW51dGVzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21pbnV0ZXM7XG4gIH1cblxuICBzZXQgc2Vjb25kcyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fc2Vjb25kcyA9IHZhbHVlO1xuICAgIHRoaXMubm9ybWFsaXplKCk7XG4gIH1cblxuICBnZXQgc2Vjb25kcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zZWNvbmRzO1xuICB9XG5cbiAgZ2V0IHRvdGFsU2Vjb25kcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9ob3VycyAqIDM2MDAgKyB0aGlzLl9taW51dGVzICogNjAgKyB0aGlzLl9zZWNvbmRzO1xuICB9XG5cbiAgdG9TdHJpbmcob3B0aW9ucz86IFRpbWVTcGFuRm9ybWF0dGluZ09wdGlvbnMpOiBzdHJpbmcge1xuICAgIG9wdGlvbnMgPz89IHtcbiAgICAgIGhvdXJzOiB0cnVlLFxuICAgICAgc2Vjb25kczogdHJ1ZSxcbiAgICB9O1xuICAgIGNvbnN0IGhvdXJzID0gb3B0aW9ucz8uaG91cnMgPyBgJHt0aGlzLmhvdXJzfTpgIDogJyc7XG4gICAgY29uc3Qgc2Vjb25kcyA9IG9wdGlvbnM/LnNlY29uZHMgPyBgOiR7dGhpcy5zZWNvbmRzfWAgOiAnJztcbiAgICByZXR1cm4gYCR7aG91cnN9JHt0aGlzLm1pbnV0ZXN9JHtzZWNvbmRzfWA7XG4gIH1cblxuICBzdGF0aWMgcGFyc2UodGltZVN0cmluZzogc3RyaW5nKTogVGltZVNwYW4ge1xuICAgIGNvbnN0IFtob3VycywgbWludXRlcywgc2Vjb25kc10gPSB0aW1lU3RyaW5nLnNwbGl0KCc6JykubWFwKE51bWJlcik7XG4gICAgcmV0dXJuIG5ldyBUaW1lU3Bhbihob3VycyA/PyAwLCBtaW51dGVzID8/IDAsIHNlY29uZHMgPz8gMCk7XG4gIH1cblxuICBzdGF0aWMgZnJvbVNlY29uZHMoc2Vjb25kczogbnVtYmVyKTogVGltZVNwYW4ge1xuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCk7XG4gICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKHNlY29uZHMgJSAzNjAwKSAvIDYwKTtcbiAgICBjb25zdCByZW1haW5pbmdTZWNvbmRzID0gc2Vjb25kcyAlIDYwO1xuICAgIHJldHVybiBuZXcgVGltZVNwYW4oaG91cnMsIG1pbnV0ZXMsIHJlbWFpbmluZ1NlY29uZHMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21EYXRlKGRhdGU6IERhdGUpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVTcGFuKGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpKTtcbiAgfVxuXG4gIGNvbXBhcmUob3RoZXI6IFRpbWVTcGFuKSB7XG4gICAgaWYgKHRoaXMudG90YWxTZWNvbmRzIDwgb3RoZXIudG90YWxTZWNvbmRzKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRvdGFsU2Vjb25kcyA+IG90aGVyLnRvdGFsU2Vjb25kcykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgbWluKG90aGVyOiBUaW1lU3Bhbik6IFRpbWVTcGFuIHtcbiAgICByZXR1cm4gdGhpcy5jb21wYXJlKG90aGVyKSA8IDAgPyB0aGlzIDogb3RoZXI7XG4gIH1cblxuICBtYXgob3RoZXI6IFRpbWVTcGFuKTogVGltZVNwYW4ge1xuICAgIHJldHVybiB0aGlzLmNvbXBhcmUob3RoZXIpID4gMCA/IHRoaXMgOiBvdGhlcjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVTcGFuRm9ybWF0dGluZ09wdGlvbnMge1xuICBob3Vycz86IGJvb2xlYW47XG4gIHNlY29uZHM/OiBib29sZWFuO1xufSJdfQ==