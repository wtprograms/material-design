import { ChangeDetectionStrategy, Component, computed, forwardRef, model, viewChild, ViewEncapsulation, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { attachTarget } from '../../directives/attachable.directive';
import { ForwardFocusDirective } from '../../directives/forward-focus.directive';
import { ParentActivationDirective } from '../../directives/parent-activation.directive';
import { BadgeComponent } from '../badge/badge.component';
import { FocusRingComponent } from '../focus-ring/focus-ring.component';
import { IconComponent } from '../icon/icon.component';
import { MaterialDesignValueAccessorComponent } from '../material-design-value-accessor.component';
import { RippleComponent } from '../ripple/ripple.component';
import { TouchAreaComponent } from '../touch-area/touch-area.component';
import * as i0 from "@angular/core";
import * as i1 from "../../directives/parent-activation.directive";
import * as i2 from "../../directives/forward-focus.directive";
import * as i3 from "@angular/common";
export class SegmentedButtonComponent extends MaterialDesignValueAccessorComponent {
    selected = model(false);
    type = model('button');
    name = model();
    value = model();
    badgeDot = model(false);
    badgeNumber = model();
    checkOnSelected = model(false);
    checked = computed(() => this.value() === true);
    selectedOrChecked = computed(() => this.selected() || this.checked());
    leadingSlot = this.slotDirective('leading');
    trailingSlot = this.slotDirective('trailing');
    _button = viewChild('button');
    _input = viewChild('input');
    input = computed(() => this.type() === 'button' ? this._button() : this._input());
    constructor() {
        super();
        attachTarget(ForwardFocusDirective, this.input);
        attachTarget(ParentActivationDirective, this.input);
    }
    onInput(event) {
        const target = event.target;
        this.value.set(target.checked);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: SegmentedButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.9", type: SegmentedButtonComponent, isStandalone: true, selector: "md-segmented-button", inputs: { selected: { classPropertyName: "selected", publicName: "selected", isSignal: true, isRequired: false, transformFunction: null }, type: { classPropertyName: "type", publicName: "type", isSignal: true, isRequired: false, transformFunction: null }, name: { classPropertyName: "name", publicName: "name", isSignal: true, isRequired: false, transformFunction: null }, value: { classPropertyName: "value", publicName: "value", isSignal: true, isRequired: false, transformFunction: null }, badgeDot: { classPropertyName: "badgeDot", publicName: "badgeDot", isSignal: true, isRequired: false, transformFunction: null }, badgeNumber: { classPropertyName: "badgeNumber", publicName: "badgeNumber", isSignal: true, isRequired: false, transformFunction: null }, checkOnSelected: { classPropertyName: "checkOnSelected", publicName: "checkOnSelected", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { selected: "selectedChange", type: "typeChange", name: "nameChange", value: "valueChange", badgeDot: "badgeDotChange", badgeNumber: "badgeNumberChange", checkOnSelected: "checkOnSelectedChange" }, host: { properties: { "attr.disabled": "disabled() || null", "attr.selected": "selectedOrChecked() || null", "attr.leading": "leadingSlot()?.any() || selectedOrChecked() && checkOnSelected() || null", "attr.trailing": "trailingSlot()?.any() || badgeDot() || !!badgeNumber() || null" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => SegmentedButtonComponent),
            },
        ], viewQueries: [{ propertyName: "_button", first: true, predicate: ["button"], descendants: true, isSignal: true }, { propertyName: "_input", first: true, predicate: ["input"], descendants: true, isSignal: true }], usesInheritance: true, hostDirectives: [{ directive: i1.ParentActivationDirective }, { directive: i2.ForwardFocusDirective }], ngImport: i0, template: "<ng-template #content>\n  <md-touch-area />\n  @if (selectedOrChecked() && checkOnSelected()) {\n  <md-icon [filled]=\"true\">check</md-icon>\n  } @else {\n  <slot name=\"leading\"></slot>\n  }\n  <span class=\"label\">\n    <slot></slot>\n  </span>\n  @if (!disabled() && (badgeDot() || !!badgeNumber())) {\n  <md-badge [embedded]=\"true\" [dot]=\"badgeDot()\" [number]=\"badgeNumber()\" />\n  } @else {\n  <slot name=\"trailing\"></slot>\n  }\n</ng-template>\n\n<md-focus-ring part=\"focus-ring\" [target]=\"input()\" />\n<md-ripple part=\"ripple\" [target]=\"input()\" />\n\n@if (type() === 'button') {\n<button part=\"button\" #button type=\"button\" [disabled]=\"disabled() || null\" [attr.name]=\"name() ?? null\"\n  [attr.value]=\"value() ?? null\">\n  <ng-container *ngTemplateOutlet=\"content\" />\n</button>\n}\n\n@if (type() !== 'button') {\n<ng-container *ngTemplateOutlet=\"content\" />\n<input #input [type]=\"type()\" [disabled]=\"disabled()\" [checked]=\"checked()\" (change)=\"onInput($event)\">\n}", styles: [":host{--_color: currentColor;position:relative;display:inline-flex;height:40px;gap:8px;cursor:pointer;place-content:center;place-items:center;-webkit-user-select:none;user-select:none;font-size:var(--md-sys-typescale-label-large-size);font-weight:var(--md-sys-typescale-label-large-weight);font-family:var(--md-sys-typescale-label-large-font);transition-property:background-color,color,border-color;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard);padding-inline:24px;background-color:transparent;color:var(--md-sys-color-surface-variant-on);border-color:var(--md-sys-color-outline);border-style:solid;border-top-width:1px;border-bottom-width:1px}:host md-icon,:host ::slotted(md-icon){--md-comp-icon-size: 18}:host button,:host a{background-color:transparent;display:inherit;font:inherit;color:inherit;padding:0;margin:0;gap:inherit;text-decoration:none;border-radius:inherit;appearance:none;border:0;outline:none;cursor:pointer;align-items:center;transition-property:opacity;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard)}:host .label{text-wrap:nowrap}:host input{appearance:none;position:absolute;inset:0;border-radius:inherit;outline:0;cursor:pointer}:host md-ripple{--md-comp-ripple-color: var(--_color)}:host(:first-child:last-child){border-radius:var(--md-sys-shape-full);border-inline-width:1px}:host(:first-child:not(:last-child)){border-radius:var(--md-sys-shape-full-start);border-inline-start-width:1px;border-inline-end-width:.5px}:host(:not(:first-child):not(:last-child)){border-inline-width:.5px}:host(:not(:first-child):last-child){border-radius:var(--md-sys-shape-full-end);border-inline-start-width:.5px;border-inline-end-width:1px}:host([leading=true]){padding-inline-start:16px}:host([trailing=true]){padding-inline-end:16px}:host([selected=true]){background-color:var(--md-sys-color-secondary-container);color:var(--md-sys-color-secondary-container-on)}:host([selected=true][disabled=true]){background-color:color-mix(in oklab,transparent,var(--md-sys-color-surface-on) calc(var(--md-sys-disabled-background-color) * 100%))}:host([disabled=true]){pointer-events:none;cursor:default;color:color-mix(in oklab,transparent,var(--md-sys-color-surface-on) calc(var(--md-sys-disabled-color) * 100%));border-color:color-mix(in oklab,transparent,var(--md-sys-color-surface-on) calc(var(--md-sys-disabled-border-color) * 100%))}\n"], dependencies: [{ kind: "component", type: TouchAreaComponent, selector: "md-touch-area" }, { kind: "component", type: RippleComponent, selector: "md-ripple, [mdRipple]", inputs: ["hoverable", "interactive"], outputs: ["hoverableChange", "interactiveChange"] }, { kind: "component", type: FocusRingComponent, selector: "md-focus-ring", inputs: ["focusVisible"], outputs: ["focusVisibleChange"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: BadgeComponent, selector: "md-badge", inputs: ["dot", "number", "embedded"], outputs: ["dotChange", "numberChange", "embeddedChange"] }, { kind: "component", type: IconComponent, selector: "md-icon", inputs: ["filled", "size", "badgeDot", "badgeNumber", "slot"], outputs: ["filledChange", "sizeChange", "badgeDotChange", "badgeNumberChange", "slotChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.ShadowDom });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: SegmentedButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'md-segmented-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.ShadowDom, standalone: true, imports: [
                        TouchAreaComponent,
                        RippleComponent,
                        FocusRingComponent,
                        CommonModule,
                        BadgeComponent,
                        IconComponent,
                    ], hostDirectives: [ParentActivationDirective, ForwardFocusDirective], host: {
                        '[attr.disabled]': 'disabled() || null',
                        '[attr.selected]': 'selectedOrChecked() || null',
                        '[attr.leading]': 'leadingSlot()?.any() || selectedOrChecked() && checkOnSelected() || null',
                        '[attr.trailing]': 'trailingSlot()?.any() || badgeDot() || !!badgeNumber() || null',
                    }, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => SegmentedButtonComponent),
                        },
                    ], template: "<ng-template #content>\n  <md-touch-area />\n  @if (selectedOrChecked() && checkOnSelected()) {\n  <md-icon [filled]=\"true\">check</md-icon>\n  } @else {\n  <slot name=\"leading\"></slot>\n  }\n  <span class=\"label\">\n    <slot></slot>\n  </span>\n  @if (!disabled() && (badgeDot() || !!badgeNumber())) {\n  <md-badge [embedded]=\"true\" [dot]=\"badgeDot()\" [number]=\"badgeNumber()\" />\n  } @else {\n  <slot name=\"trailing\"></slot>\n  }\n</ng-template>\n\n<md-focus-ring part=\"focus-ring\" [target]=\"input()\" />\n<md-ripple part=\"ripple\" [target]=\"input()\" />\n\n@if (type() === 'button') {\n<button part=\"button\" #button type=\"button\" [disabled]=\"disabled() || null\" [attr.name]=\"name() ?? null\"\n  [attr.value]=\"value() ?? null\">\n  <ng-container *ngTemplateOutlet=\"content\" />\n</button>\n}\n\n@if (type() !== 'button') {\n<ng-container *ngTemplateOutlet=\"content\" />\n<input #input [type]=\"type()\" [disabled]=\"disabled()\" [checked]=\"checked()\" (change)=\"onInput($event)\">\n}", styles: [":host{--_color: currentColor;position:relative;display:inline-flex;height:40px;gap:8px;cursor:pointer;place-content:center;place-items:center;-webkit-user-select:none;user-select:none;font-size:var(--md-sys-typescale-label-large-size);font-weight:var(--md-sys-typescale-label-large-weight);font-family:var(--md-sys-typescale-label-large-font);transition-property:background-color,color,border-color;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard);padding-inline:24px;background-color:transparent;color:var(--md-sys-color-surface-variant-on);border-color:var(--md-sys-color-outline);border-style:solid;border-top-width:1px;border-bottom-width:1px}:host md-icon,:host ::slotted(md-icon){--md-comp-icon-size: 18}:host button,:host a{background-color:transparent;display:inherit;font:inherit;color:inherit;padding:0;margin:0;gap:inherit;text-decoration:none;border-radius:inherit;appearance:none;border:0;outline:none;cursor:pointer;align-items:center;transition-property:opacity;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard)}:host .label{text-wrap:nowrap}:host input{appearance:none;position:absolute;inset:0;border-radius:inherit;outline:0;cursor:pointer}:host md-ripple{--md-comp-ripple-color: var(--_color)}:host(:first-child:last-child){border-radius:var(--md-sys-shape-full);border-inline-width:1px}:host(:first-child:not(:last-child)){border-radius:var(--md-sys-shape-full-start);border-inline-start-width:1px;border-inline-end-width:.5px}:host(:not(:first-child):not(:last-child)){border-inline-width:.5px}:host(:not(:first-child):last-child){border-radius:var(--md-sys-shape-full-end);border-inline-start-width:.5px;border-inline-end-width:1px}:host([leading=true]){padding-inline-start:16px}:host([trailing=true]){padding-inline-end:16px}:host([selected=true]){background-color:var(--md-sys-color-secondary-container);color:var(--md-sys-color-secondary-container-on)}:host([selected=true][disabled=true]){background-color:color-mix(in oklab,transparent,var(--md-sys-color-surface-on) calc(var(--md-sys-disabled-background-color) * 100%))}:host([disabled=true]){pointer-events:none;cursor:default;color:color-mix(in oklab,transparent,var(--md-sys-color-surface-on) calc(var(--md-sys-disabled-color) * 100%));border-color:color-mix(in oklab,transparent,var(--md-sys-color-surface-on) calc(var(--md-sys-disabled-border-color) * 100%))}\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VnbWVudGVkLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy93dHByb2dyYW1zL21hdGVyaWFsLWRlc2lnbi9zcmMvbGliL2NvbXBvbmVudHMvc2VnbWVudGVkLWJ1dHRvbi9zZWdtZW50ZWQtYnV0dG9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3d0cHJvZ3JhbXMvbWF0ZXJpYWwtZGVzaWduL3NyYy9saWIvY29tcG9uZW50cy9zZWdtZW50ZWQtYnV0dG9uL3NlZ21lbnRlZC1idXR0b24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsUUFBUSxFQUVSLFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDbkcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFD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LHlCQUF5QixDQUFDO3lCQUN4RDtxQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIGNvbXB1dGVkLFxuICBFbGVtZW50UmVmLFxuICBmb3J3YXJkUmVmLFxuICBtb2RlbCxcbiAgdmlld0NoaWxkLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGF0dGFjaFRhcmdldCB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvYXR0YWNoYWJsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRm9yd2FyZEZvY3VzRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9mb3J3YXJkLWZvY3VzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBQYXJlbnRBY3RpdmF0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9wYXJlbnQtYWN0aXZhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQmFkZ2VDb21wb25lbnQgfSBmcm9tICcuLi9iYWRnZS9iYWRnZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9jdXNSaW5nQ29tcG9uZW50IH0gZnJvbSAnLi4vZm9jdXMtcmluZy9mb2N1cy1yaW5nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJY29uQ29tcG9uZW50IH0gZnJvbSAnLi4vaWNvbi9pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNYXRlcmlhbERlc2lnblZhbHVlQWNjZXNzb3JDb21wb25lbnQgfSBmcm9tICcuLi9tYXRlcmlhbC1kZXNpZ24tdmFsdWUtYWNjZXNzb3IuY29tcG9uZW50JztcbmltcG9ydCB7IFJpcHBsZUNvbXBvbmVudCB9IGZyb20gJy4uL3JpcHBsZS9yaXBwbGUuY29tcG9uZW50JztcbmltcG9ydCB7IFRvdWNoQXJlYUNvbXBvbmVudCB9IGZyb20gJy4uL3RvdWNoLWFyZWEvdG91Y2gtYXJlYS5jb21wb25lbnQnO1xuXG5leHBvcnQgdHlwZSBTZWdtZW50ZWRCdXR0b25UeXBlID0gJ2J1dHRvbicgfCAnY2hlY2tib3gnIHwgJ3JhZGlvJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWQtc2VnbWVudGVkLWJ1dHRvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9zZWdtZW50ZWQtYnV0dG9uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmw6ICcuL3NlZ21lbnRlZC1idXR0b24uY29tcG9uZW50LnNjc3MnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uU2hhZG93RG9tLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbXG4gICAgVG91Y2hBcmVhQ29tcG9uZW50LFxuICAgIFJpcHBsZUNvbXBvbmVudCxcbiAgICBGb2N1c1JpbmdDb21wb25lbnQsXG4gICAgQ29tbW9uTW9kdWxlLFxuXG4gICAgQmFkZ2VDb21wb25lbnQsXG4gICAgSWNvbkNvbXBvbmVudCxcbiAgXSxcbiAgaG9zdERpcmVjdGl2ZXM6IFtQYXJlbnRBY3RpdmF0aW9uRGlyZWN0aXZlLCBGb3J3YXJkRm9jdXNEaXJlY3RpdmVdLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmRpc2FibGVkXSc6ICdkaXNhYmxlZCgpIHx8IG51bGwnLFxuICAgICdbYXR0ci5zZWxlY3RlZF0nOiAnc2VsZWN0ZWRPckNoZWNrZWQoKSB8fCBudWxsJyxcbiAgICAnW2F0dHIubGVhZGluZ10nOlxuICAgICAgJ2xlYWRpbmdTbG90KCk/LmFueSgpIHx8IHNlbGVjdGVkT3JDaGVja2VkKCkgJiYgY2hlY2tPblNlbGVjdGVkKCkgfHwgbnVsbCcsXG4gICAgJ1thdHRyLnRyYWlsaW5nXSc6XG4gICAgICAndHJhaWxpbmdTbG90KCk/LmFueSgpIHx8IGJhZGdlRG90KCkgfHwgISFiYWRnZU51bWJlcigpIHx8IG51bGwnLFxuICB9LFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU2VnbWVudGVkQnV0dG9uQ29tcG9uZW50KSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBTZWdtZW50ZWRCdXR0b25Db21wb25lbnQgZXh0ZW5kcyBNYXRlcmlhbERlc2lnblZhbHVlQWNjZXNzb3JDb21wb25lbnQ8Ym9vbGVhbj4ge1xuICByZWFkb25seSBzZWxlY3RlZCA9IG1vZGVsKGZhbHNlKTtcbiAgcmVhZG9ubHkgdHlwZSA9IG1vZGVsPFNlZ21lbnRlZEJ1dHRvblR5cGU+KCdidXR0b24nKTtcbiAgcmVhZG9ubHkgbmFtZSA9IG1vZGVsPHN0cmluZz4oKTtcbiAgb3ZlcnJpZGUgcmVhZG9ubHkgdmFsdWUgPSBtb2RlbDxib29sZWFuIHwgdW5kZWZpbmVkPigpO1xuICByZWFkb25seSBiYWRnZURvdCA9IG1vZGVsKGZhbHNlKTtcbiAgcmVhZG9ubHkgYmFkZ2VOdW1iZXIgPSBtb2RlbDxudW1iZXI+KCk7XG4gIHJlYWRvbmx5IGNoZWNrT25TZWxlY3RlZCA9IG1vZGVsKGZhbHNlKTtcbiAgcmVhZG9ubHkgY2hlY2tlZCA9IGNvbXB1dGVkKCgpID0+IHRoaXMudmFsdWUoKSA9PT0gdHJ1ZSk7XG4gIHJlYWRvbmx5IHNlbGVjdGVkT3JDaGVja2VkID0gY29tcHV0ZWQoXG4gICAgKCkgPT4gdGhpcy5zZWxlY3RlZCgpIHx8IHRoaXMuY2hlY2tlZCgpXG4gICk7XG5cbiAgcmVhZG9ubHkgbGVhZGluZ1Nsb3QgPSB0aGlzLnNsb3REaXJlY3RpdmUoJ2xlYWRpbmcnKTtcbiAgcmVhZG9ubHkgdHJhaWxpbmdTbG90ID0gdGhpcy5zbG90RGlyZWN0aXZlKCd0cmFpbGluZycpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2J1dHRvbiA9IHZpZXdDaGlsZDxFbGVtZW50UmVmPEhUTUxCdXR0b25FbGVtZW50Pj4oJ2J1dHRvbicpO1xuICBwcml2YXRlIHJlYWRvbmx5IF9pbnB1dCA9IHZpZXdDaGlsZDxFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQ+PignaW5wdXQnKTtcbiAgcmVhZG9ubHkgaW5wdXQgPSBjb21wdXRlZCgoKSA9PlxuICAgIHRoaXMudHlwZSgpID09PSAnYnV0dG9uJyA/IHRoaXMuX2J1dHRvbigpIDogdGhpcy5faW5wdXQoKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgYXR0YWNoVGFyZ2V0KEZvcndhcmRGb2N1c0RpcmVjdGl2ZSwgdGhpcy5pbnB1dCk7XG4gICAgYXR0YWNoVGFyZ2V0KFBhcmVudEFjdGl2YXRpb25EaXJlY3RpdmUsIHRoaXMuaW5wdXQpO1xuICB9XG5cbiAgb25JbnB1dChldmVudDogRXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICB0aGlzLnZhbHVlLnNldCh0YXJnZXQuY2hlY2tlZCk7XG4gIH1cbn1cbiIsIjxuZy10ZW1wbGF0ZSAjY29udGVudD5cbiAgPG1kLXRvdWNoLWFyZWEgLz5cbiAgQGlmIChzZWxlY3RlZE9yQ2hlY2tlZCgpICYmIGNoZWNrT25TZWxlY3RlZCgpKSB7XG4gIDxtZC1pY29uIFtmaWxsZWRdPVwidHJ1ZVwiPmNoZWNrPC9tZC1pY29uPlxuICB9IEBlbHNlIHtcbiAgPHNsb3QgbmFtZT1cImxlYWRpbmdcIj48L3Nsb3Q+XG4gIH1cbiAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPlxuICAgIDxzbG90Pjwvc2xvdD5cbiAgPC9zcGFuPlxuICBAaWYgKCFkaXNhYmxlZCgpICYmIChiYWRnZURvdCgpIHx8ICEhYmFkZ2VOdW1iZXIoKSkpIHtcbiAgPG1kLWJhZGdlIFtlbWJlZGRlZF09XCJ0cnVlXCIgW2RvdF09XCJiYWRnZURvdCgpXCIgW251bWJlcl09XCJiYWRnZU51bWJlcigpXCIgLz5cbiAgfSBAZWxzZSB7XG4gIDxzbG90IG5hbWU9XCJ0cmFpbGluZ1wiPjwvc2xvdD5cbiAgfVxuPC9uZy10ZW1wbGF0ZT5cblxuPG1kLWZvY3VzLXJpbmcgcGFydD1cImZvY3VzLXJpbmdcIiBbdGFyZ2V0XT1cImlucHV0KClcIiAvPlxuPG1kLXJpcHBsZSBwYXJ0PVwicmlwcGxlXCIgW3RhcmdldF09XCJpbnB1dCgpXCIgLz5cblxuQGlmICh0eXBlKCkgPT09ICdidXR0b24nKSB7XG48YnV0dG9uIHBhcnQ9XCJidXR0b25cIiAjYnV0dG9uIHR5cGU9XCJidXR0b25cIiBbZGlzYWJsZWRdPVwiZGlzYWJsZWQoKSB8fCBudWxsXCIgW2F0dHIubmFtZV09XCJuYW1lKCkgPz8gbnVsbFwiXG4gIFthdHRyLnZhbHVlXT1cInZhbHVlKCkgPz8gbnVsbFwiPlxuICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiY29udGVudFwiIC8+XG48L2J1dHRvbj5cbn1cblxuQGlmICh0eXBlKCkgIT09ICdidXR0b24nKSB7XG48bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiY29udGVudFwiIC8+XG48aW5wdXQgI2lucHV0IFt0eXBlXT1cInR5cGUoKVwiIFtkaXNhYmxlZF09XCJkaXNhYmxlZCgpXCIgW2NoZWNrZWRdPVwiY2hlY2tlZCgpXCIgKGNoYW5nZSk9XCJvbklucHV0KCRldmVudClcIj5cbn0iXX0=