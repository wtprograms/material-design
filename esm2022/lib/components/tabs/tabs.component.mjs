import { ChangeDetectionStrategy, Component, computed, model, ViewEncapsulation, } from '@angular/core';
import { MaterialDesignComponent } from '../material-design.component';
import { SlotDirective } from '../../directives/slot.directive';
import { TabComponent } from '../tab/tab.component';
import { toObservable, toSignal } from '@angular/core/rxjs-interop';
import { filter, map, merge, pairwise, startWith, switchMap, tap } from 'rxjs';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class TabsComponent extends MaterialDesignComponent {
    secondary = model(false);
    selectedTab$ = toObservable(this.defaultSlot).pipe(filter((x) => !!x), map((slots) => slots
        .componentsOf(TabComponent)
        .map((tab) => tab.selected$.pipe(map((selected) => ({ tab, selected }))))), switchMap((tabs) => merge(...tabs)), filter((x) => x.selected), map((x) => x.tab));
    selectedTab = toSignal(this.selectedTab$.pipe(startWith(undefined), pairwise(), tap(([previous]) => previous?.selected?.set(false)), 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    map(([_, current]) => current)));
    indicatorStyle = computed(() => {
        const selectedTab = this.selectedTab();
        const secondary = this.secondary();
        if (!selectedTab) {
            return {
                marginInlineStart: '0',
                width: '0',
                opacity: '0',
            };
        }
        const left = secondary
            ? selectedTab.hostElement.offsetLeft
            : selectedTab.hostElement.offsetLeft +
                selectedTab.hostElement.offsetWidth / 2 -
                selectedTab.contentWidth() / 2;
        return {
            marginInlineStart: `${left - 16}px`,
            width: `${selectedTab.contentWidth()}px`,
        };
    });
    constructor() {
        super();
        this.setSlots(TabComponent, (x) => x.secondary.set(this.secondary()));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: TabsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "18.2.9", type: TabsComponent, isStandalone: true, selector: "md-tabs", inputs: { secondary: { classPropertyName: "secondary", publicName: "secondary", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { secondary: "secondaryChange" }, host: { properties: { "attr.secondary": "secondary() || null" } }, usesInheritance: true, ngImport: i0, template: "<div class=\"tabs\">\n  <slot></slot>\n</div>\n<div class=\"indicator\" [ngStyle]=\"indicatorStyle()\"></div>", styles: [":host{display:inline-flex;flex-direction:column}:host .tabs{display:inline-flex;width:100%}:host .indicator{background-color:var(--md-sys-color-primary);border-radius:3 3 0 0;height:3px;transition-property:margin-inline-start,width,opacity;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard)}:host([secondary=true]) .indicator{border-radius:0;height:2px}\n"], dependencies: [{ kind: "directive", type: SlotDirective, selector: "slot", inputs: ["name", "slot"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.ShadowDom });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: TabsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'md-tabs', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.ShadowDom, imports: [SlotDirective, CommonModule], hostDirectives: [], host: {
                        '[attr.secondary]': 'secondary() || null',
                    }, template: "<div class=\"tabs\">\n  <slot></slot>\n</div>\n<div class=\"indicator\" [ngStyle]=\"indicatorStyle()\"></div>", styles: [":host{display:inline-flex;flex-direction:column}:host .tabs{display:inline-flex;width:100%}:host .indicator{background-color:var(--md-sys-color-primary);border-radius:3 3 0 0;height:3px;transition-property:margin-inline-start,width,opacity;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard)}:host([secondary=true]) .indicator{border-radius:0;height:2px}\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy93dHByb2dyYW1zL21hdGVyaWFsLWRlc2lnbi9zcmMvbGliL2NvbXBvbmVudHMvdGFicy90YWJzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3d0cHJvZ3JhbXMvbWF0ZXJpYWwtZGVzaWduL3NyYy9saWIvY29tcG9uZW50cy90YWJzL3RhYnMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsUUFBUSxFQUNSLEtBQUssRUFDTCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFlL0MsTUFBTSxPQUFPLGFBQWMsU0FBUSx1QkFBdUI7SUFDL0MsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixZQUFZLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ3pELE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNsQixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNaLEtBQUs7U0FDRixZQUFZLENBQUMsWUFBWSxDQUFDO1NBQzFCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ1gsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUMzRCxDQUNKLEVBQ0QsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUNuQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQ2xCLENBQUM7SUFDTyxXQUFXLEdBQUcsUUFBUSxDQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDcEIsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUNwQixRQUFRLEVBQUUsRUFDVixHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRCw2REFBNkQ7SUFDN0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUMvQixDQUNGLENBQUM7SUFDTyxjQUFjLEdBQUcsUUFBUSxDQUErQixHQUFHLEVBQUU7UUFDcEUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakIsT0FBTztnQkFDTCxpQkFBaUIsRUFBRSxHQUFHO2dCQUN0QixLQUFLLEVBQUUsR0FBRztnQkFDVixPQUFPLEVBQUUsR0FBRzthQUNiLENBQUM7UUFDSixDQUFDO1FBQ0QsTUFBTSxJQUFJLEdBQUcsU0FBUztZQUNwQixDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVO1lBQ3BDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVU7Z0JBQ2xDLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFHLENBQUM7Z0JBQ3ZDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkMsT0FBTztZQUNMLGlCQUFpQixFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUUsSUFBSTtZQUNuQyxLQUFLLEVBQUUsR0FBRyxXQUFXLENBQUMsWUFBWSxFQUFFLElBQUk7U0FDekMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUg7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7dUdBakRVLGFBQWE7MkZBQWIsYUFBYSx3VkMzQjFCLCtHQUcwRCxvZURrQjlDLGFBQWEsMEVBQUUsWUFBWTs7MkZBTTFCLGFBQWE7a0JBYnpCLFNBQVM7K0JBQ0UsU0FBUyxjQUdQLElBQUksbUJBQ0MsdUJBQXVCLENBQUMsTUFBTSxpQkFDaEMsaUJBQWlCLENBQUMsU0FBUyxXQUNqQyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsa0JBQ3RCLEVBQUUsUUFDWjt3QkFDSixrQkFBa0IsRUFBRSxxQkFBcUI7cUJBQzFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgY29tcHV0ZWQsXG4gIG1vZGVsLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRlcmlhbERlc2lnbkNvbXBvbmVudCB9IGZyb20gJy4uL21hdGVyaWFsLWRlc2lnbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2xvdERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvc2xvdC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVGFiQ29tcG9uZW50IH0gZnJvbSAnLi4vdGFiL3RhYi5jb21wb25lbnQnO1xuaW1wb3J0IHsgdG9PYnNlcnZhYmxlLCB0b1NpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB7IGZpbHRlciwgbWFwLCBtZXJnZSwgcGFpcndpc2UsIHN0YXJ0V2l0aCwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21kLXRhYnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFicy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsOiAnLi90YWJzLmNvbXBvbmVudC5zY3NzJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLlNoYWRvd0RvbSxcbiAgaW1wb3J0czogW1Nsb3REaXJlY3RpdmUsIENvbW1vbk1vZHVsZV0sXG4gIGhvc3REaXJlY3RpdmVzOiBbXSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5zZWNvbmRhcnldJzogJ3NlY29uZGFyeSgpIHx8IG51bGwnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUYWJzQ29tcG9uZW50IGV4dGVuZHMgTWF0ZXJpYWxEZXNpZ25Db21wb25lbnQge1xuICByZWFkb25seSBzZWNvbmRhcnkgPSBtb2RlbChmYWxzZSk7XG4gIHJlYWRvbmx5IHNlbGVjdGVkVGFiJCA9IHRvT2JzZXJ2YWJsZSh0aGlzLmRlZmF1bHRTbG90KS5waXBlKFxuICAgIGZpbHRlcigoeCkgPT4gISF4KSxcbiAgICBtYXAoKHNsb3RzKSA9PlxuICAgICAgc2xvdHNcbiAgICAgICAgLmNvbXBvbmVudHNPZihUYWJDb21wb25lbnQpXG4gICAgICAgIC5tYXAoKHRhYikgPT5cbiAgICAgICAgICB0YWIuc2VsZWN0ZWQkLnBpcGUobWFwKChzZWxlY3RlZCkgPT4gKHsgdGFiLCBzZWxlY3RlZCB9KSkpXG4gICAgICAgIClcbiAgICApLFxuICAgIHN3aXRjaE1hcCgodGFicykgPT4gbWVyZ2UoLi4udGFicykpLFxuICAgIGZpbHRlcigoeCkgPT4geC5zZWxlY3RlZCksXG4gICAgbWFwKCh4KSA9PiB4LnRhYilcbiAgKTtcbiAgcmVhZG9ubHkgc2VsZWN0ZWRUYWIgPSB0b1NpZ25hbChcbiAgICB0aGlzLnNlbGVjdGVkVGFiJC5waXBlKFxuICAgICAgc3RhcnRXaXRoKHVuZGVmaW5lZCksXG4gICAgICBwYWlyd2lzZSgpLFxuICAgICAgdGFwKChbcHJldmlvdXNdKSA9PiBwcmV2aW91cz8uc2VsZWN0ZWQ/LnNldChmYWxzZSkpLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgbWFwKChbXywgY3VycmVudF0pID0+IGN1cnJlbnQpXG4gICAgKVxuICApO1xuICByZWFkb25seSBpbmRpY2F0b3JTdHlsZSA9IGNvbXB1dGVkPFBhcnRpYWw8Q1NTU3R5bGVEZWNsYXJhdGlvbj4+KCgpID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZFRhYiA9IHRoaXMuc2VsZWN0ZWRUYWIoKTtcbiAgICBjb25zdCBzZWNvbmRhcnkgPSB0aGlzLnNlY29uZGFyeSgpO1xuICAgIGlmICghc2VsZWN0ZWRUYWIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hcmdpbklubGluZVN0YXJ0OiAnMCcsXG4gICAgICAgIHdpZHRoOiAnMCcsXG4gICAgICAgIG9wYWNpdHk6ICcwJyxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGxlZnQgPSBzZWNvbmRhcnlcbiAgICAgID8gc2VsZWN0ZWRUYWIuaG9zdEVsZW1lbnQub2Zmc2V0TGVmdFxuICAgICAgOiBzZWxlY3RlZFRhYi5ob3N0RWxlbWVudC5vZmZzZXRMZWZ0ICtcbiAgICAgICAgc2VsZWN0ZWRUYWIuaG9zdEVsZW1lbnQub2Zmc2V0V2lkdGggLyAyIC1cbiAgICAgICAgc2VsZWN0ZWRUYWIuY29udGVudFdpZHRoKCkgLyAyO1xuICAgIHJldHVybiB7XG4gICAgICBtYXJnaW5JbmxpbmVTdGFydDogYCR7bGVmdCAtIDE2fXB4YCxcbiAgICAgIHdpZHRoOiBgJHtzZWxlY3RlZFRhYi5jb250ZW50V2lkdGgoKX1weGAsXG4gICAgfTtcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc2V0U2xvdHMoVGFiQ29tcG9uZW50LCAoeCkgPT4geC5zZWNvbmRhcnkuc2V0KHRoaXMuc2Vjb25kYXJ5KCkpKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cInRhYnNcIj5cbiAgPHNsb3Q+PC9zbG90PlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiaW5kaWNhdG9yXCIgW25nU3R5bGVdPVwiaW5kaWNhdG9yU3R5bGUoKVwiPjwvZGl2PiJdfQ==