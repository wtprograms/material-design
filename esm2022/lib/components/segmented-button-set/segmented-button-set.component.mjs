import { ChangeDetectionStrategy, Component, model, ViewEncapsulation, } from '@angular/core';
import { MaterialDesignComponent } from '../material-design.component';
import { SegmentedButtonComponent, } from '../segmented-button/segmented-button.component';
import { SlotDirective } from '../../directives/slot.directive';
import * as i0 from "@angular/core";
export class SegmentedButtonSetComponent extends MaterialDesignComponent {
    type = model('button');
    constructor() {
        super();
        this.setSlots(SegmentedButtonComponent, (x) => x.type.set(this.type()));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: SegmentedButtonSetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "18.2.9", type: SegmentedButtonSetComponent, isStandalone: true, selector: "md-segmented-button-set", inputs: { type: { classPropertyName: "type", publicName: "type", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { type: "typeChange" }, usesInheritance: true, ngImport: i0, template: "<slot></slot>", styles: [":host{display:inline-flex}:host ::slotted(md-segmented-button){flex:1}\n"], dependencies: [{ kind: "directive", type: SlotDirective, selector: "slot", inputs: ["name", "slot"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.ShadowDom });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: SegmentedButtonSetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'md-segmented-button-set', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.ShadowDom, imports: [SlotDirective], hostDirectives: [], host: {}, template: "<slot></slot>", styles: [":host{display:inline-flex}:host ::slotted(md-segmented-button){flex:1}\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VnbWVudGVkLWJ1dHRvbi1zZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvd3Rwcm9ncmFtcy9tYXRlcmlhbC1kZXNpZ24vc3JjL2xpYi9jb21wb25lbnRzL3NlZ21lbnRlZC1idXR0b24tc2V0L3NlZ21lbnRlZC1idXR0b24tc2V0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3d0cHJvZ3JhbXMvbWF0ZXJpYWwtZGVzaWduL3NyYy9saWIvY29tcG9uZW50cy9zZWdtZW50ZWQtYnV0dG9uLXNldC9zZWdtZW50ZWQtYnV0dG9uLXNldC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxLQUFLLEVBQ0wsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFDTCx3QkFBd0IsR0FFekIsTUFBTSxnREFBZ0QsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUNBQWlDLENBQUM7O0FBYWhFLE1BQU0sT0FBTywyQkFBNEIsU0FBUSx1QkFBdUI7SUFDN0QsSUFBSSxHQUFHLEtBQUssQ0FBc0IsUUFBUSxDQUFDLENBQUM7SUFFckQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQzt1R0FOVSwyQkFBMkI7MkZBQTNCLDJCQUEyQiw0UUN4QnhDLGVBQWEsa0lEb0JELGFBQWE7OzJGQUlaLDJCQUEyQjtrQkFYdkMsU0FBUzsrQkFDRSx5QkFBeUIsY0FHdkIsSUFBSSxtQkFDQyx1QkFBdUIsQ0FBQyxNQUFNLGlCQUNoQyxpQkFBaUIsQ0FBQyxTQUFTLFdBQ2pDLENBQUMsYUFBYSxDQUFDLGtCQUNSLEVBQUUsUUFDWixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgbW9kZWwsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdGVyaWFsRGVzaWduQ29tcG9uZW50IH0gZnJvbSAnLi4vbWF0ZXJpYWwtZGVzaWduLmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICBTZWdtZW50ZWRCdXR0b25Db21wb25lbnQsXG4gIFNlZ21lbnRlZEJ1dHRvblR5cGUsXG59IGZyb20gJy4uL3NlZ21lbnRlZC1idXR0b24vc2VnbWVudGVkLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2xvdERpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvc2xvdC5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtZC1zZWdtZW50ZWQtYnV0dG9uLXNldCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zZWdtZW50ZWQtYnV0dG9uLXNldC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsOiAnLi9zZWdtZW50ZWQtYnV0dG9uLXNldC5jb21wb25lbnQuc2NzcycsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5TaGFkb3dEb20sXG4gIGltcG9ydHM6IFtTbG90RGlyZWN0aXZlXSxcbiAgaG9zdERpcmVjdGl2ZXM6IFtdLFxuICBob3N0OiB7fSxcbn0pXG5leHBvcnQgY2xhc3MgU2VnbWVudGVkQnV0dG9uU2V0Q29tcG9uZW50IGV4dGVuZHMgTWF0ZXJpYWxEZXNpZ25Db21wb25lbnQge1xuICByZWFkb25seSB0eXBlID0gbW9kZWw8U2VnbWVudGVkQnV0dG9uVHlwZT4oJ2J1dHRvbicpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zZXRTbG90cyhTZWdtZW50ZWRCdXR0b25Db21wb25lbnQsICh4KSA9PiB4LnR5cGUuc2V0KHRoaXMudHlwZSgpKSk7XG4gIH1cbn1cbiIsIjxzbG90Pjwvc2xvdD4iXX0=