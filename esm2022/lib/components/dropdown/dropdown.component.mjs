import { Component, ChangeDetectionStrategy, ViewEncapsulation, model, viewChild, computed, forwardRef, } from '@angular/core';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { FieldComponent } from '../field/field.component';
import { IconComponent } from '../icon/icon.component';
import { ListComponent } from '../list/list.component';
import { MaterialDesignValueAccessorComponent } from '../material-design-value-accessor.component';
import * as i0 from "@angular/core";
export class DropdownComponent extends MaterialDesignValueAccessorComponent {
    value = model();
    variant = model('filled');
    prefix = model();
    suffix = model();
    label = model();
    field = viewChild('field');
    selectedValueSlot = this.slotDirective('selected-value');
    populated = computed(() => {
        if (this.field()?.popover()?.state() === 'closing' && !this.value()) {
            return false;
        }
        return (!!this.value() ||
            this.field()?.open() ||
            this.field()?.popover()?.state() === 'opening');
    });
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: DropdownComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.9", type: DropdownComponent, isStandalone: true, selector: "md-dropdown", inputs: { value: { classPropertyName: "value", publicName: "value", isSignal: true, isRequired: false, transformFunction: null }, variant: { classPropertyName: "variant", publicName: "variant", isSignal: true, isRequired: false, transformFunction: null }, prefix: { classPropertyName: "prefix", publicName: "prefix", isSignal: true, isRequired: false, transformFunction: null }, suffix: { classPropertyName: "suffix", publicName: "suffix", isSignal: true, isRequired: false, transformFunction: null }, label: { classPropertyName: "label", publicName: "label", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { value: "valueChange", variant: "variantChange", prefix: "prefixChange", suffix: "suffixChange", label: "labelChange" }, host: { properties: { "attr.disabled": "disabled() || null" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => DropdownComponent),
            },
        ], viewQueries: [{ propertyName: "field", first: true, predicate: ["field"], descendants: true, isSignal: true }], usesInheritance: true, ngImport: i0, template: "<md-field #field [variant]=\"variant()\" [populated]=\"!!populated()\" [errorText]=\"errorText()\" [label]=\"label()\"\n  [disabled]=\"disabled()\" [maxPopoverHeight]=\"300\">\n  <slot name=\"leading\" slot=\"leading\"></slot>\n  <slot name=\"prefix\" slot=\"prefix\"></slot>\n  <slot name=\"suffix\" slot=\"suffix\"></slot>\n  <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n  <slot name=\"counter\" slot=\"counter\"></slot>\n  <span class=\"selected-value\">\n    <slot name=\"selected-value\"></slot>\n    @if (!selectedValueSlot()?.any()) {\n    {{ value() }}\n    }\n  </span>\n  <md-icon slot=\"trailing\">arrow_drop_down</md-icon>\n  <md-list slot=\"popover\">\n    <slot></slot>\n  </md-list>\n</md-field>", styles: [":host{position:relative}:host md-field::part(body){cursor:pointer}:host([disabled=true]){pointer-events:none;cursor:default}\n"], dependencies: [{ kind: "component", type: FieldComponent, selector: "md-field", inputs: ["value", "variant", "label", "populated", "open", "popoverTrigger", "maxPopoverHeight"], outputs: ["valueChange", "variantChange", "labelChange", "populatedChange", "contentClick", "bodyClick", "openChange", "popoverTriggerChange", "maxPopoverHeightChange", "popoverStateChange"] }, { kind: "component", type: IconComponent, selector: "md-icon", inputs: ["filled", "size", "badgeDot", "badgeNumber", "slot"], outputs: ["filledChange", "sizeChange", "badgeDotChange", "badgeNumberChange", "slotChange"] }, { kind: "ngmodule", type: FormsModule }, { kind: "component", type: ListComponent, selector: "md-list" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.ShadowDom });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: DropdownComponent, decorators: [{
            type: Component,
            args: [{ selector: 'md-dropdown', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.ShadowDom, imports: [FieldComponent, IconComponent, FormsModule, ListComponent], hostDirectives: [], host: {
                        '[attr.disabled]': 'disabled() || null',
                    }, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => DropdownComponent),
                        },
                    ], template: "<md-field #field [variant]=\"variant()\" [populated]=\"!!populated()\" [errorText]=\"errorText()\" [label]=\"label()\"\n  [disabled]=\"disabled()\" [maxPopoverHeight]=\"300\">\n  <slot name=\"leading\" slot=\"leading\"></slot>\n  <slot name=\"prefix\" slot=\"prefix\"></slot>\n  <slot name=\"suffix\" slot=\"suffix\"></slot>\n  <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n  <slot name=\"counter\" slot=\"counter\"></slot>\n  <span class=\"selected-value\">\n    <slot name=\"selected-value\"></slot>\n    @if (!selectedValueSlot()?.any()) {\n    {{ value() }}\n    }\n  </span>\n  <md-icon slot=\"trailing\">arrow_drop_down</md-icon>\n  <md-list slot=\"popover\">\n    <slot></slot>\n  </md-list>\n</md-field>", styles: [":host{position:relative}:host md-field::part(body){cursor:pointer}:host([disabled=true]){pointer-events:none;cursor:default}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvd3Rwcm9ncmFtcy9tYXRlcmlhbC1kZXNpZ24vc3JjL2xpYi9jb21wb25lbnRzL2Ryb3Bkb3duL2Ryb3Bkb3duLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3d0cHJvZ3JhbXMvbWF0ZXJpYWwtZGVzaWduL3NyYy9saWIvY29tcG9uZW50cy9kcm9wZG93bi9kcm9wZG93bi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsS0FBSyxFQUNMLFNBQVMsRUFDVCxRQUFRLEVBQ1IsVUFBVSxHQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsY0FBYyxFQUFnQixNQUFNLDBCQUEwQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sNkNBQTZDLENBQUM7O0FBc0JuRyxNQUFNLE9BQU8saUJBRVgsU0FBUSxvQ0FBdUM7SUFDN0IsS0FBSyxHQUFHLEtBQUssRUFBSyxDQUFDO0lBQzVCLE9BQU8sR0FBRyxLQUFLLENBQWUsUUFBUSxDQUFDLENBQUM7SUFDeEMsTUFBTSxHQUFHLEtBQUssRUFBVSxDQUFDO0lBQ3pCLE1BQU0sR0FBRyxLQUFLLEVBQVUsQ0FBQztJQUN6QixLQUFLLEdBQUcsS0FBSyxFQUFVLENBQUM7SUFDeEIsS0FBSyxHQUFHLFNBQVMsQ0FBb0IsT0FBTyxDQUFDLENBQUM7SUFFOUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRXpELFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ2pDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ3BFLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUNELE9BQU8sQ0FDTCxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLFNBQVMsQ0FDL0MsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO3VHQXJCUSxpQkFBaUI7MkZBQWpCLGlCQUFpQiw4MkJBUmpCO1lBQ1Q7Z0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQzthQUNqRDtTQUNGLGlLQ2pDSCw0dEJBaUJXLHdMREtDLGNBQWMsdVZBQUUsYUFBYSxnTkFBRSxXQUFXLCtCQUFFLGFBQWE7OzJGQWF4RCxpQkFBaUI7a0JBcEI3QixTQUFTOytCQUNFLGFBQWEsY0FHWCxJQUFJLG1CQUNDLHVCQUF1QixDQUFDLE1BQU0saUJBQ2hDLGlCQUFpQixDQUFDLFNBQVMsV0FDakMsQ0FBQyxjQUFjLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxhQUFhLENBQUMsa0JBQ3BELEVBQUUsUUFDWjt3QkFDSixpQkFBaUIsRUFBRSxvQkFBb0I7cUJBQ3hDLGFBQ1U7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsS0FBSyxFQUFFLElBQUk7NEJBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUM7eUJBQ2pEO3FCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIG1vZGVsLFxuICB2aWV3Q2hpbGQsXG4gIGNvbXB1dGVkLFxuICBmb3J3YXJkUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZpZWxkQ29tcG9uZW50LCBGaWVsZFZhcmlhbnQgfSBmcm9tICcuLi9maWVsZC9maWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWNvbkNvbXBvbmVudCB9IGZyb20gJy4uL2ljb24vaWNvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTGlzdENvbXBvbmVudCB9IGZyb20gJy4uL2xpc3QvbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTWF0ZXJpYWxEZXNpZ25WYWx1ZUFjY2Vzc29yQ29tcG9uZW50IH0gZnJvbSAnLi4vbWF0ZXJpYWwtZGVzaWduLXZhbHVlLWFjY2Vzc29yLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21kLWRyb3Bkb3duJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Ryb3Bkb3duLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmw6ICcuL2Ryb3Bkb3duLmNvbXBvbmVudC5zY3NzJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLlNoYWRvd0RvbSxcbiAgaW1wb3J0czogW0ZpZWxkQ29tcG9uZW50LCBJY29uQ29tcG9uZW50LCBGb3Jtc01vZHVsZSwgTGlzdENvbXBvbmVudF0sXG4gIGhvc3REaXJlY3RpdmVzOiBbXSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5kaXNhYmxlZF0nOiAnZGlzYWJsZWQoKSB8fCBudWxsJyxcbiAgfSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IERyb3Bkb3duQ29tcG9uZW50KSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93bkNvbXBvbmVudDxcbiAgVFxuPiBleHRlbmRzIE1hdGVyaWFsRGVzaWduVmFsdWVBY2Nlc3NvckNvbXBvbmVudDxUPiB7XG4gIG92ZXJyaWRlIHJlYWRvbmx5IHZhbHVlID0gbW9kZWw8VD4oKTtcbiAgcmVhZG9ubHkgdmFyaWFudCA9IG1vZGVsPEZpZWxkVmFyaWFudD4oJ2ZpbGxlZCcpO1xuICByZWFkb25seSBwcmVmaXggPSBtb2RlbDxzdHJpbmc+KCk7XG4gIHJlYWRvbmx5IHN1ZmZpeCA9IG1vZGVsPHN0cmluZz4oKTtcbiAgcmVhZG9ubHkgbGFiZWwgPSBtb2RlbDxzdHJpbmc+KCk7XG4gIHJlYWRvbmx5IGZpZWxkID0gdmlld0NoaWxkPEZpZWxkQ29tcG9uZW50PFQ+PignZmllbGQnKTtcblxuICByZWFkb25seSBzZWxlY3RlZFZhbHVlU2xvdCA9IHRoaXMuc2xvdERpcmVjdGl2ZSgnc2VsZWN0ZWQtdmFsdWUnKTtcblxuICByZWFkb25seSBwb3B1bGF0ZWQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHRoaXMuZmllbGQoKT8ucG9wb3ZlcigpPy5zdGF0ZSgpID09PSAnY2xvc2luZycgJiYgIXRoaXMudmFsdWUoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgISF0aGlzLnZhbHVlKCkgfHxcbiAgICAgIHRoaXMuZmllbGQoKT8ub3BlbigpIHx8XG4gICAgICB0aGlzLmZpZWxkKCk/LnBvcG92ZXIoKT8uc3RhdGUoKSA9PT0gJ29wZW5pbmcnXG4gICAgKTtcbiAgfSk7XG59XG4iLCI8bWQtZmllbGQgI2ZpZWxkIFt2YXJpYW50XT1cInZhcmlhbnQoKVwiIFtwb3B1bGF0ZWRdPVwiISFwb3B1bGF0ZWQoKVwiIFtlcnJvclRleHRdPVwiZXJyb3JUZXh0KClcIiBbbGFiZWxdPVwibGFiZWwoKVwiXG4gIFtkaXNhYmxlZF09XCJkaXNhYmxlZCgpXCIgW21heFBvcG92ZXJIZWlnaHRdPVwiMzAwXCI+XG4gIDxzbG90IG5hbWU9XCJsZWFkaW5nXCIgc2xvdD1cImxlYWRpbmdcIj48L3Nsb3Q+XG4gIDxzbG90IG5hbWU9XCJwcmVmaXhcIiBzbG90PVwicHJlZml4XCI+PC9zbG90PlxuICA8c2xvdCBuYW1lPVwic3VmZml4XCIgc2xvdD1cInN1ZmZpeFwiPjwvc2xvdD5cbiAgPHNsb3QgbmFtZT1cInN1cHBvcnRpbmctdGV4dFwiIHNsb3Q9XCJzdXBwb3J0aW5nLXRleHRcIj48L3Nsb3Q+XG4gIDxzbG90IG5hbWU9XCJjb3VudGVyXCIgc2xvdD1cImNvdW50ZXJcIj48L3Nsb3Q+XG4gIDxzcGFuIGNsYXNzPVwic2VsZWN0ZWQtdmFsdWVcIj5cbiAgICA8c2xvdCBuYW1lPVwic2VsZWN0ZWQtdmFsdWVcIj48L3Nsb3Q+XG4gICAgQGlmICghc2VsZWN0ZWRWYWx1ZVNsb3QoKT8uYW55KCkpIHtcbiAgICB7eyB2YWx1ZSgpIH19XG4gICAgfVxuICA8L3NwYW4+XG4gIDxtZC1pY29uIHNsb3Q9XCJ0cmFpbGluZ1wiPmFycm93X2Ryb3BfZG93bjwvbWQtaWNvbj5cbiAgPG1kLWxpc3Qgc2xvdD1cInBvcG92ZXJcIj5cbiAgICA8c2xvdD48L3Nsb3Q+XG4gIDwvbWQtbGlzdD5cbjwvbWQtZmllbGQ+Il19