import { ChangeDetectionStrategy, Component, computed, effect, forwardRef, model, signal, viewChild, viewChildren, ViewEncapsulation, } from '@angular/core';
import { ButtonComponent } from '../button/button.component';
import { IconButtonComponent } from '../icon-button/icon-button.component';
import { FieldComponent } from '../field/field.component';
import { CommonModule } from '@angular/common';
import { MaterialDesignValueAccessorComponent } from '../material-design-value-accessor.component';
import { IconComponent } from '../icon/icon.component';
import { openClose } from '../../common/rxjs/open-close';
import { toSignal } from '@angular/core/rxjs-interop';
import { ListItemComponent } from '../list-item/list-item.component';
import { DialogComponent } from '../dialog/dialog.component';
import { SlotDirective } from '../../directives/slot.directive';
import { TooltipComponent } from '../tooltip/tooltip.component';
import { DateFormatPipe } from '../../pipes/date-format.pipe';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class DatePickerComponent extends MaterialDesignValueAccessorComponent {
    range = model(false);
    variant = model('dropdown');
    fieldVariant = model('filled');
    prefix = model();
    suffix = model();
    label = model();
    field = viewChild('field');
    dialog = viewChild('dialog');
    populated = computed(() => {
        if (this.field()?.popover()?.state() === 'closing' && !this.value()) {
            return false;
        }
        return (!!this.value() ||
            this.field()?.open() ||
            this.field()?.popover()?.state() === 'opening');
    });
    _today = new Date();
    value = model();
    selectionValue = model(this.value());
    canOkay = computed(() => {
        if (this.range() &&
            this.fromSelectedValueAsDate &&
            !this.toSelectedValueAsDate) {
            return false;
        }
        return true;
    });
    get fromValueAsDate() {
        if (this.range()) {
            return this.value()?.[0] ? new Date(this.value()[0]) : undefined;
        }
        return this.value() ? new Date(this.value()) : undefined;
    }
    set fromValueAsDate(value) {
        if (this.range()) {
            this.value.update((x) => [value?.toISOString(), x?.[1]]);
        }
        else {
            this.value.set(value?.toISOString());
        }
    }
    get toValueAsDate() {
        if (!this.range()) {
            return undefined;
        }
        return this.value()?.[1] ? new Date(this.value()[1]) : undefined;
    }
    set toValueAsDate(value) {
        if (!this.range()) {
            return;
        }
        this.value.update((x) => [x?.[0], value?.toISOString()]);
    }
    get fromSelectedValueAsDate() {
        if (this.range()) {
            return this.selectionValue()?.[0]
                ? new Date(this.selectionValue()[0])
                : undefined;
        }
        return this.selectionValue()
            ? new Date(this.selectionValue())
            : undefined;
    }
    set fromSelectedValueAsDate(value) {
        if (this.range()) {
            this.selectionValue.update((x) => [value?.toISOString(), x?.[1]]);
        }
        else {
            this.selectionValue.set(value?.toISOString());
        }
    }
    get toSelectedValueAsDate() {
        if (!this.range()) {
            return undefined;
        }
        return this.selectionValue()?.[1]
            ? new Date(this.selectionValue()[1])
            : undefined;
    }
    set toSelectedValueAsDate(value) {
        if (!this.range()) {
            return;
        }
        this.selectionValue.update((x) => [x?.[0], value?.toISOString()]);
    }
    locale = model('en');
    monthItems = viewChildren('monthItem');
    monthView = model(this._today.getMonth());
    monthViewText = computed(() => {
        const month = this.monthView();
        const date = this.fromSelectedValueAsDate ?? new Date(this._today);
        date.setMonth(month);
        const dateString = date.toLocaleDateString(this.locale(), {
            month: 'short',
        });
        return dateString;
    });
    months = computed(() => {
        const formatter = new Intl.DateTimeFormat(this.locale(), { month: 'long' });
        return Array.from({ length: 12 }, (_, value) => ({
            text: formatter.format(new Date(0, value)),
            value,
        }));
    });
    monthViewOpen = signal(false);
    monthViewState = toSignal(openClose(this.monthViewOpen, 'short4'), {
        initialValue: 'closed',
    });
    yearItems = viewChildren('yearItem');
    yearView = model(this._today.getFullYear());
    yearViewText = computed(() => {
        const year = this.yearView();
        const date = this.fromSelectedValueAsDate ?? new Date(this._today);
        date.setFullYear(year);
        const dateString = date.toLocaleDateString(this.locale(), {
            year: 'numeric',
        });
        return dateString;
    });
    get years() {
        const currentYear = new Date().getFullYear();
        const startYear = currentYear - 50;
        const endYear = currentYear + 20;
        return Array.from({ length: endYear - startYear + 1 }, (_, value) => startYear + value);
    }
    yearViewOpen = signal(false);
    yearViewState = toSignal(openClose(this.yearViewOpen, 'short4'), {
        initialValue: 'closed',
    });
    dayNames = computed(() => {
        const formatter = new Intl.DateTimeFormat(this.locale(), {
            weekday: 'narrow',
        });
        return Array.from({ length: 7 }, (_, i) => formatter.format(new Date(1970, 0, i + 4)));
    });
    days = computed(() => {
        const month = this.monthView();
        const year = this.yearView();
        const date = new Date(year, month);
        const firstDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay();
        const startDate = new Date(date.getFullYear(), date.getMonth(), 1 - firstDayOfMonth);
        const calendarDays = [];
        for (let i = 0; i < 42; i++) {
            const currentDate = new Date(startDate);
            currentDate.setDate(startDate.getDate() + i);
            const day = currentDate.getDate();
            let type = 'current';
            if (currentDate.getMonth() < date.getMonth()) {
                type = 'previous';
            }
            else if (currentDate.getMonth() > date.getMonth()) {
                type = 'next';
            }
            calendarDays.push({ day, type, date: currentDate });
        }
        return calendarDays;
    });
    fromSelection = true;
    constructor() {
        super();
        effect(() => {
            if (this.variant() === 'embedded') {
                this.value.set(this.selectionValue());
            }
        }, {
            allowSignalWrites: true,
        });
    }
    openMonthView() {
        this.yearViewOpen.set(false);
        this.monthViewOpen.set(!this.monthViewOpen());
        const selectedItem = this.monthItems().find((x) => x.selected());
        selectedItem?.hostElement.scrollIntoView({
            block: 'nearest',
        });
    }
    monthItemClick(month) {
        this.monthView.set(month);
        this.monthViewOpen.set(false);
    }
    openYearView() {
        this.monthViewOpen.set(false);
        this.yearViewOpen.set(!this.yearViewOpen());
        const selectedItem = this.yearItems().find((x) => x.variant() === 'filled');
        selectedItem?.hostElement.scrollIntoView({
            block: 'nearest',
        });
    }
    yearItemClick(year) {
        this.yearView.set(year);
        this.yearViewOpen.set(false);
    }
    todayClick() {
        this.monthView.set(this._today.getMonth());
        this.yearView.set(this._today.getFullYear());
    }
    dayClick(day) {
        if (this.fromSelection) {
            this.fromSelectedValueAsDate = day.date;
            this.toSelectedValueAsDate = undefined;
        }
        else {
            if (this.fromSelectedValueAsDate &&
                day.date < this.fromSelectedValueAsDate) {
                this.fromSelection = !this.fromSelection;
                this.dayClick(day);
                return;
            }
            this.toSelectedValueAsDate = day.date;
        }
        this.monthView.set(day.date.getMonth());
        this.yearView.set(day.date.getFullYear());
        if (this.range()) {
            this.fromSelection = !this.fromSelection;
        }
    }
    isDateEqual(dateA, dateB) {
        return (dateA?.getFullYear() === dateB?.getFullYear() &&
            dateA?.getMonth() === dateB?.getMonth() &&
            dateA?.getDate() === dateB?.getDate());
    }
    isToday(date) {
        return (this._today.getFullYear() === date.getFullYear() &&
            this._today.getMonth() === date.getMonth() &&
            this._today.getDate() === date.getDate());
    }
    isDaySelected(date) {
        return (this.isDateEqual(this.fromSelectedValueAsDate, date) ||
            this.isDateEqual(this.toSelectedValueAsDate, date));
    }
    isInRange(date) {
        if (!this.fromSelectedValueAsDate || !this.toSelectedValueAsDate) {
            return false;
        }
        return (date >= this.fromSelectedValueAsDate && date <= this.toSelectedValueAsDate);
    }
    clearClick() {
        this.fromSelection = true;
        this.value.set(undefined);
        this.selectionValue.set(undefined);
    }
    okayClick() {
        this.fromSelection = true;
        this.value.set(this.selectionValue());
        this.monthView.set(this.fromSelectedValueAsDate?.getMonth() ?? this._today.getMonth());
        this.yearView.set(this.fromSelectedValueAsDate?.getFullYear() ?? this._today.getFullYear());
        if (this.variant() === 'dropdown') {
            this.field()?.open.set(false);
        }
        if (this.variant() === 'dialog') {
            this.dialog()?.open.set(false);
        }
        this.monthViewOpen.set(false);
        this.yearViewOpen.set(false);
    }
    cancelClick() {
        this.fromSelection = true;
        this.selectionValue.set(this.value());
        this.monthView.set(this.fromSelectedValueAsDate?.getMonth() ?? this._today.getMonth());
        this.yearView.set(this.fromSelectedValueAsDate?.getFullYear() ?? this._today.getFullYear());
        if (this.variant() === 'dropdown') {
            this.field()?.open.set(false);
        }
        if (this.variant() === 'dialog') {
            this.dialog()?.open.set(false);
        }
        this.monthViewOpen.set(false);
        this.yearViewOpen.set(false);
    }
    bodyClick() {
        if (this.variant() !== 'dialog') {
            return;
        }
        this.dialog()?.open.set(true);
    }
    popoverStateChange(state) {
        if (state === 'closed') {
            this.cancelClick();
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: DatePickerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.9", type: DatePickerComponent, isStandalone: true, selector: "md-date-picker", inputs: { range: { classPropertyName: "range", publicName: "range", isSignal: true, isRequired: false, transformFunction: null }, variant: { classPropertyName: "variant", publicName: "variant", isSignal: true, isRequired: false, transformFunction: null }, fieldVariant: { classPropertyName: "fieldVariant", publicName: "fieldVariant", isSignal: true, isRequired: false, transformFunction: null }, prefix: { classPropertyName: "prefix", publicName: "prefix", isSignal: true, isRequired: false, transformFunction: null }, suffix: { classPropertyName: "suffix", publicName: "suffix", isSignal: true, isRequired: false, transformFunction: null }, label: { classPropertyName: "label", publicName: "label", isSignal: true, isRequired: false, transformFunction: null }, value: { classPropertyName: "value", publicName: "value", isSignal: true, isRequired: false, transformFunction: null }, selectionValue: { classPropertyName: "selectionValue", publicName: "selectionValue", isSignal: true, isRequired: false, transformFunction: null }, locale: { classPropertyName: "locale", publicName: "locale", isSignal: true, isRequired: false, transformFunction: null }, monthView: { classPropertyName: "monthView", publicName: "monthView", isSignal: true, isRequired: false, transformFunction: null }, yearView: { classPropertyName: "yearView", publicName: "yearView", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { range: "rangeChange", variant: "variantChange", fieldVariant: "fieldVariantChange", prefix: "prefixChange", suffix: "suffixChange", label: "labelChange", value: "valueChange", selectionValue: "selectionValueChange", locale: "localeChange", monthView: "monthViewChange", yearView: "yearViewChange" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: forwardRef(() => DatePickerComponent),
            },
        ], viewQueries: [{ propertyName: "field", first: true, predicate: ["field"], descendants: true, isSignal: true }, { propertyName: "dialog", first: true, predicate: ["dialog"], descendants: true, isSignal: true }, { propertyName: "monthItems", predicate: ["monthItem"], descendants: true, isSignal: true }, { propertyName: "yearItems", predicate: ["yearItem"], descendants: true, isSignal: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #actions>\n  <md-button [attr.slot]=\"variant() === 'dialog' ? 'action' : null\" variant=\"text\" class=\"clear\" (click)=\"clearClick()\"\n    i18n>Clear</md-button>\n  @if (variant() !== 'embedded') {\n  <md-button [attr.slot]=\"variant() === 'dialog' ? 'action' : null\" variant=\"text\" (click)=\"okayClick()\"\n    [disabled]=\"!canOkay()\" i18n>Okay</md-button>\n  <md-button [attr.slot]=\"variant() === 'dialog' ? 'action' : null\" variant=\"text\" (click)=\"cancelClick()\"\n    i18n>Cancel</md-button>\n  }\n</ng-template>\n\n<ng-template #contents>\n  <div class=\"container\">\n    <div class=\"header\">\n      <div class=\"months\">\n        <md-button variant=\"plain\" class=\"navigate\" (click)=\"monthView.set(monthView() - 1)\">\n          <md-icon>chevron_left</md-icon>\n        </md-button>\n        <md-button #monthViewButton variant=\"plain\" (click)=\"openMonthView()\">\n          {{ monthViewText() }}\n          <md-icon class=\"month-icon\" slot=\"trailing\">arrow_drop_down</md-icon>\n        </md-button>\n        <md-button variant=\"plain\" class=\"navigate\" (click)=\"monthView.set(monthView() + 1)\">\n          <md-icon>chevron_right</md-icon>\n        </md-button>\n      </div>\n      @if (variant() === 'dropdown') {\n      <md-icon-button #today (click)=\"todayClick()\">today</md-icon-button>\n      <md-tooltip [target]=\"today\" i18n>Today</md-tooltip>\n      } @else {\n      <md-button variant=\"text\" (click)=\"todayClick()\" i18n>Today</md-button>\n      }\n      <div class=\"years\">\n        <md-button variant=\"plain\" class=\"navigate\" (click)=\"yearView.set(yearView() - 1)\">\n          <md-icon>chevron_left</md-icon>\n        </md-button>\n        <md-button variant=\"plain\" (click)=\"openYearView()\">\n          {{ yearViewText() }}\n          <md-icon slot=\"trailing\">arrow_drop_down</md-icon>\n        </md-button>\n        <md-button variant=\"plain\" class=\"navigate\" (click)=\"yearView.set(yearView() + 1)\">\n          <md-icon>chevron_right</md-icon>\n        </md-button>\n      </div>\n    </div>\n    <div class=\"body\">\n      <div class=\"view\" [ngClass]=\"monthViewState()\">\n        @for (month of months(); track $index) {\n        <md-list-item #monthItem [selected]=\"monthView() === month.value\" (click)=\"monthItemClick(month.value)\"\n          type=\"button\">\n          {{ month.text }}\n        </md-list-item>\n        }\n      </div>\n      <div class=\"view year-view\" [ngClass]=\"yearViewState()\">\n        @for (year of years; track $index) {\n        <md-button #yearItem [variant]=\"yearView() === year ? 'filled' : 'text'\" (click)=\"yearItemClick(year)\">\n          {{ year }}\n        </md-button>\n        }\n      </div>\n      <div class=\"calendar\">\n        <div class=\"days day-names\">\n          @for (dayName of dayNames(); track $index) {\n          <div class=\"day-container\">\n            <div class=\"day-name\">{{ dayName }}</div>\n          </div>\n          }\n        </div>\n        <div class=\"days\">\n          @for (day of days(); track $index) {\n          <div class=\"day-container\">\n            @if (isInRange(day.date)) {\n            <div class=\"in-range-indicator\" [class.first]=\"isDateEqual(fromSelectedValueAsDate, day.date)\"\n              [class.last]=\"isDateEqual(toSelectedValueAsDate, day.date)\" [class.not-current]=\"day.type !== 'current'\">\n            </div>\n            }\n            <md-icon-button [custom]=\"true\" [selected]=\"isDaySelected(day.date)\"\n              [variant]=\"isDaySelected(day.date) ? 'filled' : 'standard'\" [class.not-current]=\"day.type !== 'current'\"\n              [class.today]=\"isToday(day.date)\" (click)=\"dayClick(day)\" [class.in-range]=\"isInRange(day.date)\">{{\n              day.day\n              }}</md-icon-button>\n          </div>\n          }\n        </div>\n      </div>\n    </div>\n    @if (variant() !== 'dialog') {\n    <div class=\"actions\">\n      <ng-container *ngTemplateOutlet=\"actions\" />\n    </div>\n    }\n  </div>\n</ng-template>\n\n@if (variant() === 'embedded') {\n<ng-container *ngTemplateOutlet=\"contents\" />\n} @else {\n<md-field #field [variant]=\"fieldVariant()\" [populated]=\"!!populated()\" [errorText]=\"errorText()\" [label]=\"label()\"\n  [disabled]=\"disabled()\" (bodyClick)=\"bodyClick()\" (popoverStateChange)=\"popoverStateChange($event)\">\n  <slot name=\"leading\" slot=\"leading\"></slot>\n  <slot name=\"prefix\" slot=\"prefix\"></slot>\n  <slot name=\"suffix\" slot=\"suffix\"></slot>\n  <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n  <slot name=\"counter\" slot=\"counter\"></slot>\n  <span class=\"selected-value\">\n    @if (!fromValueAsDate) {\n    <span i18n>Select a date...</span>\n    } @else {\n    <span>{{ fromValueAsDate | dateFormat: this.locale(): 'dd MMM yyyy' }}</span>\n    @if (range()) {\n    <span>-</span>\n    <span>{{ toValueAsDate | dateFormat: this.locale(): 'dd MMM yyyy' }}</span>\n    }\n    }\n  </span>\n  <md-icon slot=\"trailing\">calendar_month</md-icon>\n  @if (variant() === 'dropdown') {\n  <div class=\"popover\" slot=\"popover\">\n    <ng-container *ngTemplateOutlet=\"contents\" />\n  </div>\n  }\n</md-field>\n@if (variant() === 'dialog') {\n<md-dialog #dialog (stateChange)=\"popoverStateChange($event)\">\n  <md-icon slot=\"icon\">calendar_month</md-icon>\n  <span class=\"selected-value\" slot=\"headline\">\n    @if (!fromSelectedValueAsDate) {\n    <span i18n>Select a date...</span>\n    } @else {\n    <span>{{ fromSelectedValueAsDate | dateFormat: this.locale(): 'dd MMM yyyy' }}</span>\n    @if (range()) {\n    <span>-</span>\n    <span>{{ toSelectedValueAsDate | dateFormat: this.locale(): 'dd MMM yyyy' }}</span>\n    }\n    }\n  </span>\n  <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n  <ng-container *ngTemplateOutlet=\"contents\" />\n  <ng-container *ngTemplateOutlet=\"actions\" />\n</md-dialog>\n}\n}", styles: [":host md-field::part(body){cursor:pointer}:host .popover{display:inline-flex}:host .container{display:inline-flex;flex-direction:column;isolation:isolate;flex-grow:1;background-color:var(--md-sys-color-surface-container);border-radius:var(--md-sys-shape-extra-small);padding-top:20px;padding-bottom:12px;padding-inline:12px}:host .container .header{display:inline-flex;justify-content:space-between;margin-bottom:30px}:host .container .months,:host .container .years{display:inline-flex}:host .container .navigate{width:40px;height:40px}:host .container md-button[variant=plain]:not(.navigate){padding-inline-start:12px;padding-inline-end:4px}:host .container .body{position:relative;flex-grow:1;flex-direction:column;display:inline-flex}:host .container .view{display:inline-flex;flex-direction:column;visibility:hidden;position:absolute;inset:0;background-color:var(--md-sys-color-surface-container);height:0px;opacity:0;overflow-y:auto;z-index:1;transition-property:height,opacity,visibility;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard)}:host .container .view:before{content:\"\";position:fixed;inset:0 0 auto;border-top:1px solid var(--md-sys-color-outline)}:host .container .view:not(.closed){height:auto;opacity:1;visibility:visible}:host .container .view.year-view{display:grid;grid-template-columns:repeat(3,1fr);gap:16px;padding-top:8px;padding-bottom:8px;padding-inline:16px}:host .container .calendar{display:inline-flex;flex-direction:column}:host .container .calendar .day-names{margin-bottom:16px}:host .container .calendar .days{display:grid;grid-template-columns:repeat(7,1fr)}:host .container .calendar .days .day-container{position:relative;display:inline-flex;justify-content:center;align-items:center;text-align:center;height:40px}:host .container .calendar .days .day-name{display:inline-flex;justify-content:center;align-items:center;text-align:center;font-size:var(--md-sys-typescale-label-large-size);font-weight:var(--md-sys-typescale-label-large-weight);font-family:var(--md-sys-typescale-label-large-font);height:40px;width:40px;justify-self:center;align-self:center}:host .container .calendar .days .today{border:1px solid var(--md-sys-color-primary)}:host .container .calendar .days .in-range-indicator{position:absolute;height:24px;background-color:var(--md-sys-color-primary);inset-inline:0;z-index:-1}:host .container .calendar .days .in-range-indicator.first{inset-inline-start:50%}:host .container .calendar .days .in-range-indicator.last{inset-inline-end:50%}:host .container .calendar .days .in-range-indicator.not-current{background:color-mix(in oklab,var(--md-sys-color-primary),var(--md-sys-color-surface) 50%)}:host .container md-icon-button{justify-self:center;align-self:center}:host .container md-icon-button.in-range{color:var(--md-sys-color-primary-on)}:host .container md-icon-button.not-current{color:color-mix(in oklab,currentColor,var(--md-sys-color-surface) 50%)}:host .container md-icon-button.not-current[variant=filled]{color:var(--md-sys-color-primary-on);background:color-mix(in oklab,var(--md-sys-color-primary),var(--md-sys-color-surface) 50%)}:host .container md-icon-button.in-range.not-current:not([variant=filled]){color:var(--md-sys-color-primary-on)}:host .actions{display:inline-flex;justify-content:flex-end;gap:8px;flex-grow:1;margin-top:8px}:host .clear{margin-inline-end:auto}:host .selected-value{display:inline-flex;gap:8px}\n"], dependencies: [{ kind: "component", type: ButtonComponent, selector: "md-button", inputs: ["variant", "disabled", "type", "href", "anchorTarget", "name", "value", "progressIndeterminate", "progressValue", "progressMax"], outputs: ["variantChange", "disabledChange", "typeChange", "hrefChange", "anchorTargetChange", "nameChange", "valueChange", "progressIndeterminateChange", "progressValueChange", "progressMaxChange"] }, { kind: "component", type: IconButtonComponent, selector: "md-icon-button", inputs: ["disabled", "type", "href", "anchorTarget", "name", "value", "progressIndeterminate", "progressValue", "progressMax", "variant", "selected", "custom", "badgeDot", "badgeNumber"], outputs: ["disabledChange", "typeChange", "hrefChange", "anchorTargetChange", "nameChange", "valueChange", "progressIndeterminateChange", "progressValueChange", "progressMaxChange", "variantChange", "selectedChange", "customChange", "badgeDotChange", "badgeNumberChange"] }, { kind: "component", type: FieldComponent, selector: "md-field", inputs: ["value", "variant", "label", "populated", "open", "popoverTrigger", "maxPopoverHeight"], outputs: ["valueChange", "variantChange", "labelChange", "populatedChange", "contentClick", "bodyClick", "openChange", "popoverTriggerChange", "maxPopoverHeightChange", "popoverStateChange"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: IconComponent, selector: "md-icon", inputs: ["filled", "size", "badgeDot", "badgeNumber", "slot"], outputs: ["filledChange", "sizeChange", "badgeDotChange", "badgeNumberChange", "slotChange"] }, { kind: "component", type: ListItemComponent, selector: "md-list-item", inputs: ["dragging", "top", "large", "selected", "split", "disabled", "type", "href", "anchorTarget", "name", "value", "progressIndeterminate", "progressValue", "progressMax", "progressBuffer"], outputs: ["draggingChange", "topChange", "largeChange", "selectedChange", "splitChange", "disabledChange", "typeChange", "hrefChange", "anchorTargetChange", "nameChange", "valueChange", "progressIndeterminateChange", "progressValueChange", "progressMaxChange", "progressBufferChange"] }, { kind: "component", type: DialogComponent, selector: "md-dialog", inputs: ["returnValue", "open"], outputs: ["returnValueChange", "openChange", "cancel", "stateChange"] }, { kind: "directive", type: SlotDirective, selector: "slot", inputs: ["name", "slot"] }, { kind: "component", type: TooltipComponent, selector: "md-tooltip", inputs: ["variant", "placement", "trigger", "offset", "manualClose", "modal"], outputs: ["variantChange", "placementChange", "triggerChange", "offsetChange", "manualCloseChange", "modalChange"] }, { kind: "pipe", type: DateFormatPipe, name: "dateFormat" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.ShadowDom });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: DatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'md-date-picker', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.ShadowDom, imports: [
                        ButtonComponent,
                        IconButtonComponent,
                        FieldComponent,
                        CommonModule,
                        IconComponent,
                        FieldComponent,
                        ListItemComponent,
                        DialogComponent,
                        SlotDirective,
                        TooltipComponent,
                        DateFormatPipe,
                    ], hostDirectives: [], host: {}, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => DatePickerComponent),
                        },
                    ], template: "<ng-template #actions>\n  <md-button [attr.slot]=\"variant() === 'dialog' ? 'action' : null\" variant=\"text\" class=\"clear\" (click)=\"clearClick()\"\n    i18n>Clear</md-button>\n  @if (variant() !== 'embedded') {\n  <md-button [attr.slot]=\"variant() === 'dialog' ? 'action' : null\" variant=\"text\" (click)=\"okayClick()\"\n    [disabled]=\"!canOkay()\" i18n>Okay</md-button>\n  <md-button [attr.slot]=\"variant() === 'dialog' ? 'action' : null\" variant=\"text\" (click)=\"cancelClick()\"\n    i18n>Cancel</md-button>\n  }\n</ng-template>\n\n<ng-template #contents>\n  <div class=\"container\">\n    <div class=\"header\">\n      <div class=\"months\">\n        <md-button variant=\"plain\" class=\"navigate\" (click)=\"monthView.set(monthView() - 1)\">\n          <md-icon>chevron_left</md-icon>\n        </md-button>\n        <md-button #monthViewButton variant=\"plain\" (click)=\"openMonthView()\">\n          {{ monthViewText() }}\n          <md-icon class=\"month-icon\" slot=\"trailing\">arrow_drop_down</md-icon>\n        </md-button>\n        <md-button variant=\"plain\" class=\"navigate\" (click)=\"monthView.set(monthView() + 1)\">\n          <md-icon>chevron_right</md-icon>\n        </md-button>\n      </div>\n      @if (variant() === 'dropdown') {\n      <md-icon-button #today (click)=\"todayClick()\">today</md-icon-button>\n      <md-tooltip [target]=\"today\" i18n>Today</md-tooltip>\n      } @else {\n      <md-button variant=\"text\" (click)=\"todayClick()\" i18n>Today</md-button>\n      }\n      <div class=\"years\">\n        <md-button variant=\"plain\" class=\"navigate\" (click)=\"yearView.set(yearView() - 1)\">\n          <md-icon>chevron_left</md-icon>\n        </md-button>\n        <md-button variant=\"plain\" (click)=\"openYearView()\">\n          {{ yearViewText() }}\n          <md-icon slot=\"trailing\">arrow_drop_down</md-icon>\n        </md-button>\n        <md-button variant=\"plain\" class=\"navigate\" (click)=\"yearView.set(yearView() + 1)\">\n          <md-icon>chevron_right</md-icon>\n        </md-button>\n      </div>\n    </div>\n    <div class=\"body\">\n      <div class=\"view\" [ngClass]=\"monthViewState()\">\n        @for (month of months(); track $index) {\n        <md-list-item #monthItem [selected]=\"monthView() === month.value\" (click)=\"monthItemClick(month.value)\"\n          type=\"button\">\n          {{ month.text }}\n        </md-list-item>\n        }\n      </div>\n      <div class=\"view year-view\" [ngClass]=\"yearViewState()\">\n        @for (year of years; track $index) {\n        <md-button #yearItem [variant]=\"yearView() === year ? 'filled' : 'text'\" (click)=\"yearItemClick(year)\">\n          {{ year }}\n        </md-button>\n        }\n      </div>\n      <div class=\"calendar\">\n        <div class=\"days day-names\">\n          @for (dayName of dayNames(); track $index) {\n          <div class=\"day-container\">\n            <div class=\"day-name\">{{ dayName }}</div>\n          </div>\n          }\n        </div>\n        <div class=\"days\">\n          @for (day of days(); track $index) {\n          <div class=\"day-container\">\n            @if (isInRange(day.date)) {\n            <div class=\"in-range-indicator\" [class.first]=\"isDateEqual(fromSelectedValueAsDate, day.date)\"\n              [class.last]=\"isDateEqual(toSelectedValueAsDate, day.date)\" [class.not-current]=\"day.type !== 'current'\">\n            </div>\n            }\n            <md-icon-button [custom]=\"true\" [selected]=\"isDaySelected(day.date)\"\n              [variant]=\"isDaySelected(day.date) ? 'filled' : 'standard'\" [class.not-current]=\"day.type !== 'current'\"\n              [class.today]=\"isToday(day.date)\" (click)=\"dayClick(day)\" [class.in-range]=\"isInRange(day.date)\">{{\n              day.day\n              }}</md-icon-button>\n          </div>\n          }\n        </div>\n      </div>\n    </div>\n    @if (variant() !== 'dialog') {\n    <div class=\"actions\">\n      <ng-container *ngTemplateOutlet=\"actions\" />\n    </div>\n    }\n  </div>\n</ng-template>\n\n@if (variant() === 'embedded') {\n<ng-container *ngTemplateOutlet=\"contents\" />\n} @else {\n<md-field #field [variant]=\"fieldVariant()\" [populated]=\"!!populated()\" [errorText]=\"errorText()\" [label]=\"label()\"\n  [disabled]=\"disabled()\" (bodyClick)=\"bodyClick()\" (popoverStateChange)=\"popoverStateChange($event)\">\n  <slot name=\"leading\" slot=\"leading\"></slot>\n  <slot name=\"prefix\" slot=\"prefix\"></slot>\n  <slot name=\"suffix\" slot=\"suffix\"></slot>\n  <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n  <slot name=\"counter\" slot=\"counter\"></slot>\n  <span class=\"selected-value\">\n    @if (!fromValueAsDate) {\n    <span i18n>Select a date...</span>\n    } @else {\n    <span>{{ fromValueAsDate | dateFormat: this.locale(): 'dd MMM yyyy' }}</span>\n    @if (range()) {\n    <span>-</span>\n    <span>{{ toValueAsDate | dateFormat: this.locale(): 'dd MMM yyyy' }}</span>\n    }\n    }\n  </span>\n  <md-icon slot=\"trailing\">calendar_month</md-icon>\n  @if (variant() === 'dropdown') {\n  <div class=\"popover\" slot=\"popover\">\n    <ng-container *ngTemplateOutlet=\"contents\" />\n  </div>\n  }\n</md-field>\n@if (variant() === 'dialog') {\n<md-dialog #dialog (stateChange)=\"popoverStateChange($event)\">\n  <md-icon slot=\"icon\">calendar_month</md-icon>\n  <span class=\"selected-value\" slot=\"headline\">\n    @if (!fromSelectedValueAsDate) {\n    <span i18n>Select a date...</span>\n    } @else {\n    <span>{{ fromSelectedValueAsDate | dateFormat: this.locale(): 'dd MMM yyyy' }}</span>\n    @if (range()) {\n    <span>-</span>\n    <span>{{ toSelectedValueAsDate | dateFormat: this.locale(): 'dd MMM yyyy' }}</span>\n    }\n    }\n  </span>\n  <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n  <ng-container *ngTemplateOutlet=\"contents\" />\n  <ng-container *ngTemplateOutlet=\"actions\" />\n</md-dialog>\n}\n}", styles: [":host md-field::part(body){cursor:pointer}:host .popover{display:inline-flex}:host .container{display:inline-flex;flex-direction:column;isolation:isolate;flex-grow:1;background-color:var(--md-sys-color-surface-container);border-radius:var(--md-sys-shape-extra-small);padding-top:20px;padding-bottom:12px;padding-inline:12px}:host .container .header{display:inline-flex;justify-content:space-between;margin-bottom:30px}:host .container .months,:host .container .years{display:inline-flex}:host .container .navigate{width:40px;height:40px}:host .container md-button[variant=plain]:not(.navigate){padding-inline-start:12px;padding-inline-end:4px}:host .container .body{position:relative;flex-grow:1;flex-direction:column;display:inline-flex}:host .container .view{display:inline-flex;flex-direction:column;visibility:hidden;position:absolute;inset:0;background-color:var(--md-sys-color-surface-container);height:0px;opacity:0;overflow-y:auto;z-index:1;transition-property:height,opacity,visibility;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard)}:host .container .view:before{content:\"\";position:fixed;inset:0 0 auto;border-top:1px solid var(--md-sys-color-outline)}:host .container .view:not(.closed){height:auto;opacity:1;visibility:visible}:host .container .view.year-view{display:grid;grid-template-columns:repeat(3,1fr);gap:16px;padding-top:8px;padding-bottom:8px;padding-inline:16px}:host .container .calendar{display:inline-flex;flex-direction:column}:host .container .calendar .day-names{margin-bottom:16px}:host .container .calendar .days{display:grid;grid-template-columns:repeat(7,1fr)}:host .container .calendar .days .day-container{position:relative;display:inline-flex;justify-content:center;align-items:center;text-align:center;height:40px}:host .container .calendar .days .day-name{display:inline-flex;justify-content:center;align-items:center;text-align:center;font-size:var(--md-sys-typescale-label-large-size);font-weight:var(--md-sys-typescale-label-large-weight);font-family:var(--md-sys-typescale-label-large-font);height:40px;width:40px;justify-self:center;align-self:center}:host .container .calendar .days .today{border:1px solid var(--md-sys-color-primary)}:host .container .calendar .days .in-range-indicator{position:absolute;height:24px;background-color:var(--md-sys-color-primary);inset-inline:0;z-index:-1}:host .container .calendar .days .in-range-indicator.first{inset-inline-start:50%}:host .container .calendar .days .in-range-indicator.last{inset-inline-end:50%}:host .container .calendar .days .in-range-indicator.not-current{background:color-mix(in oklab,var(--md-sys-color-primary),var(--md-sys-color-surface) 50%)}:host .container md-icon-button{justify-self:center;align-self:center}:host .container md-icon-button.in-range{color:var(--md-sys-color-primary-on)}:host .container md-icon-button.not-current{color:color-mix(in oklab,currentColor,var(--md-sys-color-surface) 50%)}:host .container md-icon-button.not-current[variant=filled]{color:var(--md-sys-color-primary-on);background:color-mix(in oklab,var(--md-sys-color-primary),var(--md-sys-color-surface) 50%)}:host .container md-icon-button.in-range.not-current:not([variant=filled]){color:var(--md-sys-color-primary-on)}:host .actions{display:inline-flex;justify-content:flex-end;gap:8px;flex-grow:1;margin-top:8px}:host .clear{margin-inline-end:auto}:host .selected-value{display:inline-flex;gap:8px}\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,