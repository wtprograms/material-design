import { ChangeDetectionStrategy, Component, computed, inject, model, ViewEncapsulation, } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { filter, switchMap, merge, fromEvent, map } from 'rxjs';
import { AttachableDirective } from '../../directives/attachable.directive';
import { MaterialDesignComponent } from '../material-design.component';
import * as i0 from "@angular/core";
import * as i1 from "../../directives/attachable.directive";
export class ElevationComponent extends MaterialDesignComponent {
    level = model(0);
    hoverable = model(true);
    interactive = model(true);
    dragging = model(false);
    attachableDirective = inject(AttachableDirective);
    hovering = toSignal(this.attachableDirective.targetElement$.pipe(filter((x) => !!x), switchMap((x) => merge(fromEvent(x, 'pointerenter'), fromEvent(x, 'pointerleave'))), filter(() => this.hoverable() || this.interactive()), map((x) => x.type === 'pointerenter')));
    activated = toSignal(this.attachableDirective.targetElement$.pipe(filter((x) => !!x), switchMap((x) => merge(fromEvent(x, 'pointerdown'), fromEvent(x, 'pointerup'))), filter(() => this.interactive()), map((x) => x.type === 'pointerdown')));
    levelVariable = computed(() => {
        let level = this.level();
        if (this.dragging()) {
            return 'var(--md-sys-elevation-4)';
        }
        if (this.hovering() && !this.activated()) {
            level += 1;
        }
        return `var(--md-sys-elevation-${level})`;
    });
    constructor() {
        super();
        this.attachableDirective.events.set([
            'pointerenter',
            'pointerleave',
            'pointerdown',
            'pointerup',
        ]);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: ElevationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "18.2.9", type: ElevationComponent, isStandalone: true, selector: "md-elevation", inputs: { level: { classPropertyName: "level", publicName: "level", isSignal: true, isRequired: false, transformFunction: null }, hoverable: { classPropertyName: "hoverable", publicName: "hoverable", isSignal: true, isRequired: false, transformFunction: null }, interactive: { classPropertyName: "interactive", publicName: "interactive", isSignal: true, isRequired: false, transformFunction: null }, dragging: { classPropertyName: "dragging", publicName: "dragging", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { level: "levelChange", hoverable: "hoverableChange", interactive: "interactiveChange", dragging: "draggingChange" }, host: { properties: { "style.boxShadow": "levelVariable()" } }, usesInheritance: true, hostDirectives: [{ directive: i1.AttachableDirective, inputs: ["events", "events", "for", "for", "target", "target"] }], ngImport: i0, template: "", styles: [":host{position:absolute;border-radius:inherit;inset:0;transition-property:box-shadow;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.ShadowDom });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: ElevationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'md-elevation', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.ShadowDom, hostDirectives: [
                        {
                            directive: AttachableDirective,
                            inputs: ['events', 'for', 'target'],
                        },
                    ], host: {
                        '[style.boxShadow]': 'levelVariable()',
                    }, template: "", styles: [":host{position:absolute;border-radius:inherit;inset:0;transition-property:box-shadow;transition-duration:var(--md-sys-motion-duration-short-4);transition-timing-function:var(--md-sys-motion-easing-standard)}\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxldmF0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3d0cHJvZ3JhbXMvbWF0ZXJpYWwtZGVzaWduL3NyYy9saWIvY29tcG9uZW50cy9lbGV2YXRpb24vZWxldmF0aW9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3d0cHJvZ3JhbXMvbWF0ZXJpYWwtZGVzaWduL3NyYy9saWIvY29tcG9uZW50cy9lbGV2YXRpb24vZWxldmF0aW9uLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFFBQVEsRUFDUixNQUFNLEVBQ04sS0FBSyxFQUNMLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDNUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7OztBQW1CdkUsTUFBTSxPQUFPLGtCQUFtQixTQUFRLHVCQUF1QjtJQUNwRCxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBRWxELFFBQVEsR0FBRyxRQUFRLENBQzFCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUMxQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbEIsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDZCxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQ2xFLEVBQ0QsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsRUFDcEQsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxDQUN0QyxDQUNGLENBQUM7SUFDTyxTQUFTLEdBQUcsUUFBUSxDQUMzQixJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDMUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2xCLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ2QsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUM5RCxFQUNELE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsRUFDaEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxDQUNyQyxDQUNGLENBQUM7SUFFTyxhQUFhLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRTtRQUNyQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDekIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztZQUNwQixPQUFPLDJCQUEyQixDQUFDO1FBQ3JDLENBQUM7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQ3pDLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDYixDQUFDO1FBQ0QsT0FBTywwQkFBMEIsS0FBSyxHQUFHLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFFSDtRQUNFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDbEMsY0FBYztZQUNkLGNBQWM7WUFDZCxhQUFhO1lBQ2IsV0FBVztTQUNaLENBQUMsQ0FBQztJQUNMLENBQUM7dUdBL0NVLGtCQUFrQjsyRkFBbEIsa0JBQWtCLDA2QkM5Qi9CLEVBQUE7OzJGRDhCYSxrQkFBa0I7a0JBakI5QixTQUFTOytCQUNFLGNBQWMsY0FHWixJQUFJLG1CQUNDLHVCQUF1QixDQUFDLE1BQU0saUJBQ2hDLGlCQUFpQixDQUFDLFNBQVMsa0JBQzFCO3dCQUNkOzRCQUNFLFNBQVMsRUFBRSxtQkFBbUI7NEJBQzlCLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDO3lCQUNwQztxQkFDRixRQUNLO3dCQUNKLG1CQUFtQixFQUFFLGlCQUFpQjtxQkFDdkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBjb21wdXRlZCxcbiAgaW5qZWN0LFxuICBtb2RlbCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdG9TaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgeyBmaWx0ZXIsIHN3aXRjaE1hcCwgbWVyZ2UsIGZyb21FdmVudCwgbWFwIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdHRhY2hhYmxlRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9hdHRhY2hhYmxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBNYXRlcmlhbERlc2lnbkNvbXBvbmVudCB9IGZyb20gJy4uL21hdGVyaWFsLWRlc2lnbi5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtZC1lbGV2YXRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vZWxldmF0aW9uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmw6ICcuL2VsZXZhdGlvbi5jb21wb25lbnQuc2NzcycsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5TaGFkb3dEb20sXG4gIGhvc3REaXJlY3RpdmVzOiBbXG4gICAge1xuICAgICAgZGlyZWN0aXZlOiBBdHRhY2hhYmxlRGlyZWN0aXZlLFxuICAgICAgaW5wdXRzOiBbJ2V2ZW50cycsICdmb3InLCAndGFyZ2V0J10sXG4gICAgfSxcbiAgXSxcbiAgaG9zdDoge1xuICAgICdbc3R5bGUuYm94U2hhZG93XSc6ICdsZXZlbFZhcmlhYmxlKCknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBFbGV2YXRpb25Db21wb25lbnQgZXh0ZW5kcyBNYXRlcmlhbERlc2lnbkNvbXBvbmVudCB7XG4gIHJlYWRvbmx5IGxldmVsID0gbW9kZWwoMCk7XG4gIHJlYWRvbmx5IGhvdmVyYWJsZSA9IG1vZGVsKHRydWUpO1xuICByZWFkb25seSBpbnRlcmFjdGl2ZSA9IG1vZGVsKHRydWUpO1xuICByZWFkb25seSBkcmFnZ2luZyA9IG1vZGVsKGZhbHNlKTtcbiAgcmVhZG9ubHkgYXR0YWNoYWJsZURpcmVjdGl2ZSA9IGluamVjdChBdHRhY2hhYmxlRGlyZWN0aXZlKTtcblxuICByZWFkb25seSBob3ZlcmluZyA9IHRvU2lnbmFsKFxuICAgIHRoaXMuYXR0YWNoYWJsZURpcmVjdGl2ZS50YXJnZXRFbGVtZW50JC5waXBlKFxuICAgICAgZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgICAgc3dpdGNoTWFwKCh4KSA9PlxuICAgICAgICBtZXJnZShmcm9tRXZlbnQoeCwgJ3BvaW50ZXJlbnRlcicpLCBmcm9tRXZlbnQoeCwgJ3BvaW50ZXJsZWF2ZScpKVxuICAgICAgKSxcbiAgICAgIGZpbHRlcigoKSA9PiB0aGlzLmhvdmVyYWJsZSgpIHx8IHRoaXMuaW50ZXJhY3RpdmUoKSksXG4gICAgICBtYXAoKHgpID0+IHgudHlwZSA9PT0gJ3BvaW50ZXJlbnRlcicpXG4gICAgKVxuICApO1xuICByZWFkb25seSBhY3RpdmF0ZWQgPSB0b1NpZ25hbChcbiAgICB0aGlzLmF0dGFjaGFibGVEaXJlY3RpdmUudGFyZ2V0RWxlbWVudCQucGlwZShcbiAgICAgIGZpbHRlcigoeCkgPT4gISF4KSxcbiAgICAgIHN3aXRjaE1hcCgoeCkgPT5cbiAgICAgICAgbWVyZ2UoZnJvbUV2ZW50KHgsICdwb2ludGVyZG93bicpLCBmcm9tRXZlbnQoeCwgJ3BvaW50ZXJ1cCcpKVxuICAgICAgKSxcbiAgICAgIGZpbHRlcigoKSA9PiB0aGlzLmludGVyYWN0aXZlKCkpLFxuICAgICAgbWFwKCh4KSA9PiB4LnR5cGUgPT09ICdwb2ludGVyZG93bicpXG4gICAgKVxuICApO1xuXG4gIHJlYWRvbmx5IGxldmVsVmFyaWFibGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IGxldmVsID0gdGhpcy5sZXZlbCgpO1xuICAgIGlmICh0aGlzLmRyYWdnaW5nKCkpIHtcbiAgICAgIHJldHVybiAndmFyKC0tbWQtc3lzLWVsZXZhdGlvbi00KSc7XG4gICAgfVxuICAgIGlmICh0aGlzLmhvdmVyaW5nKCkgJiYgIXRoaXMuYWN0aXZhdGVkKCkpIHtcbiAgICAgIGxldmVsICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBgdmFyKC0tbWQtc3lzLWVsZXZhdGlvbi0ke2xldmVsfSlgO1xuICB9KTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYXR0YWNoYWJsZURpcmVjdGl2ZS5ldmVudHMuc2V0KFtcbiAgICAgICdwb2ludGVyZW50ZXInLFxuICAgICAgJ3BvaW50ZXJsZWF2ZScsXG4gICAgICAncG9pbnRlcmRvd24nLFxuICAgICAgJ3BvaW50ZXJ1cCcsXG4gICAgXSk7XG4gIH1cbn1cbiIsIiJdfQ==