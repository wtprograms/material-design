/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { InjectionToken } from '@angular/core';
export const GET_VALIDATION_MESSAGE_INJECTION_TOKEN = new InjectionToken('GET_VALIDATION_MESSAGE_INJECTION_TOKEN', {
    providedIn: 'root',
    factory: () => (messageOrKey, properties) => {
        if (typeof messageOrKey === 'string') {
            return messageOrKey;
        }
        const handlers = {
            required: () => $localize `This field is required.`,
            minlength: ({ requiredLength, actualLength }) => $localize `This field must be at least ${requiredLength} characters`,
            maxlength: ({ requiredLength, actualLength }) => $localize `This field must be at most ${requiredLength} characters`,
            min: ({ min }) => $localize `This field must be at least ${min}`,
            max: ({ max }) => $localize `This field must be at most ${max}`,
            pattern: ({ requiredPattern, actualValue }) => $localize `This field must match the pattern: ${requiredPattern}`,
            email: () => $localize `This field must be a valid email address.`,
            nullValidator: () => null,
        };
        if (handlers[messageOrKey]) {
            return handlers[messageOrKey](properties ?? {});
        }
        return undefined;
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXZhbGlkYXRpb24tbWVzc2FnZS5pbmplY3Rpb24tdG9rZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy93dHByb2dyYW1zL21hdGVyaWFsLWRlc2lnbi9zcmMvbGliL2NvbmZpZ3VyYXRpb24vZ2V0LXZhbGlkYXRpb24tbWVzc2FnZS5pbmplY3Rpb24tdG9rZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3RELHVEQUF1RDtBQUN2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9DLE1BQU0sQ0FBQyxNQUFNLHNDQUFzQyxHQUFHLElBQUksY0FBYyxDQUV0RSx3Q0FBd0MsRUFBRTtJQUMxQyxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxZQUFvQixFQUFFLFVBQWdDLEVBQUUsRUFBRTtRQUN4RSxJQUFJLE9BQU8sWUFBWSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sWUFBWSxDQUFDO1FBQ3RCLENBQUM7UUFFRCxNQUFNLFFBQVEsR0FBd0I7WUFDcEMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQSx5QkFBeUI7WUFDbEQsU0FBUyxFQUFFLENBQUMsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFPLEVBQUUsRUFBRSxDQUNuRCxTQUFTLENBQUEsK0JBQStCLGNBQWMsYUFBYTtZQUNyRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQU8sRUFBRSxFQUFFLENBQ25ELFNBQVMsQ0FBQSw4QkFBOEIsY0FBYyxhQUFhO1lBQ3BFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFPLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQSwrQkFBK0IsR0FBRyxFQUFFO1lBQ3BFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFPLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQSw4QkFBOEIsR0FBRyxFQUFFO1lBQ25FLE9BQU8sRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBTyxFQUFFLEVBQUUsQ0FDakQsU0FBUyxDQUFBLHNDQUFzQyxlQUFlLEVBQUU7WUFDbEUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQSwyQ0FBMkM7WUFDakUsYUFBYSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUk7U0FDMUIsQ0FBQztRQUVGLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7WUFDM0IsT0FBTyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY29uc3QgR0VUX1ZBTElEQVRJT05fTUVTU0FHRV9JTkpFQ1RJT05fVE9LRU4gPSBuZXcgSW5qZWN0aW9uVG9rZW48XG4gIChtZXNzYWdlT3JLZXk6IHN0cmluZywgcHJvcGVydGllcz86IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHN0cmluZ1xuPignR0VUX1ZBTElEQVRJT05fTUVTU0FHRV9JTkpFQ1RJT05fVE9LRU4nLCB7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgZmFjdG9yeTogKCkgPT4gKG1lc3NhZ2VPcktleTogc3RyaW5nLCBwcm9wZXJ0aWVzPzogUmVjb3JkPHN0cmluZywgYW55PikgPT4ge1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZU9yS2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG1lc3NhZ2VPcktleTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVyczogUmVjb3JkPHN0cmluZywgYW55PiA9IHtcbiAgICAgIHJlcXVpcmVkOiAoKSA9PiAkbG9jYWxpemVgVGhpcyBmaWVsZCBpcyByZXF1aXJlZC5gLFxuICAgICAgbWlubGVuZ3RoOiAoeyByZXF1aXJlZExlbmd0aCwgYWN0dWFsTGVuZ3RoIH06IGFueSkgPT5cbiAgICAgICAgJGxvY2FsaXplYFRoaXMgZmllbGQgbXVzdCBiZSBhdCBsZWFzdCAke3JlcXVpcmVkTGVuZ3RofSBjaGFyYWN0ZXJzYCxcbiAgICAgIG1heGxlbmd0aDogKHsgcmVxdWlyZWRMZW5ndGgsIGFjdHVhbExlbmd0aCB9OiBhbnkpID0+XG4gICAgICAgICRsb2NhbGl6ZWBUaGlzIGZpZWxkIG11c3QgYmUgYXQgbW9zdCAke3JlcXVpcmVkTGVuZ3RofSBjaGFyYWN0ZXJzYCxcbiAgICAgIG1pbjogKHsgbWluIH06IGFueSkgPT4gJGxvY2FsaXplYFRoaXMgZmllbGQgbXVzdCBiZSBhdCBsZWFzdCAke21pbn1gLFxuICAgICAgbWF4OiAoeyBtYXggfTogYW55KSA9PiAkbG9jYWxpemVgVGhpcyBmaWVsZCBtdXN0IGJlIGF0IG1vc3QgJHttYXh9YCxcbiAgICAgIHBhdHRlcm46ICh7IHJlcXVpcmVkUGF0dGVybiwgYWN0dWFsVmFsdWUgfTogYW55KSA9PlxuICAgICAgICAkbG9jYWxpemVgVGhpcyBmaWVsZCBtdXN0IG1hdGNoIHRoZSBwYXR0ZXJuOiAke3JlcXVpcmVkUGF0dGVybn1gLFxuICAgICAgZW1haWw6ICgpID0+ICRsb2NhbGl6ZWBUaGlzIGZpZWxkIG11c3QgYmUgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLmAsXG4gICAgICBudWxsVmFsaWRhdG9yOiAoKSA9PiBudWxsLFxuICAgIH07XG5cbiAgICBpZiAoaGFuZGxlcnNbbWVzc2FnZU9yS2V5XSkge1xuICAgICAgcmV0dXJuIGhhbmRsZXJzW21lc3NhZ2VPcktleV0ocHJvcGVydGllcyA/PyB7fSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSxcbn0pO1xuIl19