@use '../md';
@use 'sass:map';

$tokens: (
  'border-radius': var(--md-sys-shape-full),
  'color': (
    'unchecked': var(--md-sys-color-surface-variant-on),
    'checked': var(--md-sys-color-primary),
    'indeterminate': var(--md-sys-color-primary),
    'error': var(--md-sys-color-danger),
    'success': var(--md-sys-color-success),
    'warning': var(--md-sys-color-warning),
    'disabled': var(--md-sys-color-disabled-color),
  ),
  'switch': (
    'unchecked': (
      'track': (
        'background-color': var(--md-sys-color-surface-container-highest),
        'border-color': var(--md-sys-color-outline),
      ),
      'handle': (
        'background-color': var(--md-sys-color-outline),
        'color': var(--md-sys-color-surface-container-highest),
      ),
      'error': (
        'track': (
          'background-color': var(--md-sys-color-danger-container),
          'border-color': var(--md-sys-color-danger),
        ),
        'handle': (
          'background-color': var(--md-sys-color-danger),
          'color': var(--md-sys-color-danger-container),
        ),
      ),
      'warning': (
        'track': (
          'background-color': var(--md-sys-color-warning-container),
          'border-color': var(--md-sys-color-warning),
        ),
        'handle': (
          'background-color': var(--md-sys-color-warning),
          'color': var(--md-sys-color-warning-container),
        ),
      ),
      'success': (
        'track': (
          'background-color': var(--md-sys-color-success-container),
          'border-color': var(--md-sys-color-success),
        ),
        'handle': (
          'background-color': var(--md-sys-color-success),
          'color': var(--md-sys-color-success-container),
        ),
      ),
      'disabled': (
        'track': (
          'background-color': var(--md-sys-color-disabled-background),
          'border-color': var(--md-sys-color-disabled-border),
        ),
        'handle': (
          'background-color': var(--md-sys-color-disabled-border),
          'color': var(--md-sys-color-disabled-color),
        ),
      ),
    ),
    'checked': (
      'track': (
        'background-color': var(--md-sys-color-primary),
        'border-color': var(--md-sys-color-primary),
      ),
      'handle': (
        'background-color': var(--md-sys-color-primary-on),
        'color': var(--md-sys-color-primary),
      ),
      'error': (
        'track': (
          'background-color': var(--md-sys-color-danger),
          'border-color': var(--md-sys-color-danger),
        ),
        'handle': (
          'background-color': var(--md-sys-color-danger-on),
          'color': var(--md-sys-color-danger),
        ),
      ),
      'warning': (
        'track': (
          'background-color': var(--md-sys-color-warning),
          'border-color': var(--md-sys-color-warning),
        ),
        'handle': (
          'background-color': var(--md-sys-color-warning-on),
          'color': var(--md-sys-color-warning),
        ),
      ),
      'success': (
        'track': (
          'background-color': var(--md-sys-color-success),
          'border-color': var(--md-sys-color-success),
        ),
        'handle': (
          'background-color': var(--md-sys-color-success-on),
          'color': var(--md-sys-color-success),
        ),
      ),
      'disabled': (
        'track': (
          'background-color': var(--md-sys-color-disabled-background),
          'border-color': var(--md-sys-color-disabled-border),
        ),
        'handle': (
          'background-color': var(--md-sys-color-disabled-border),
          'color': var(--md-sys-color-disabled-color),
        ),
      ),
    ),
    'indeterminate': (
      'track': (
        'background-color': var(--md-sys-color-primary-container),
        'border-color': var(--md-sys-color-primary),
      ),
      'handle': (
        'background-color': var(--md-sys-color-primary),
        'color': var(--md-sys-color-primary-container),
      ),
      'error': (
        'track': (
          'background-color': var(--md-sys-color-danger-container),
          'border-color': var(--md-sys-color-danger),
        ),
        'handle': (
          'background-color': var(--md-sys-color-danger),
          'color': var(--md-sys-color-danger-container),
        ),
      ),
      'warning': (
        'track': (
          'background-color': var(--md-sys-color-warning-container),
          'border-color': var(--md-sys-color-warning),
        ),
        'handle': (
          'background-color': var(--md-sys-color-warning),
          'color': var(--md-sys-color-warning-container),
        ),
      ),
      'success': (
        'track': (
          'background-color': var(--md-sys-color-success-container),
          'border-color': var(--md-sys-color-success),
        ),
        'handle': (
          'background-color': var(--md-sys-color-success),
          'color': var(--md-sys-color-success-container),
        ),
      ),
      'disabled': (
        'track': (
          'background-color': var(--md-sys-color-disabled-background),
          'border-color': var(--md-sys-color-disabled-border),
        ),
        'handle': (
          'background-color': var(--md-sys-color-disabled-border),
          'color': var(--md-sys-color-disabled-color),
        ),
      ),
    ),
  ),
);

@mixin disabled {
  &:not(:has(input:checked))[disabled],
  &:has(input:checked)[disabled],
  &:has(input:indeterminate)[disabled] {
    & {
      --_color: var(--_color-disabled);
    }
  }

  &[switch] {
    $switch-tokens: map.get($tokens, 'switch');

    &:not(:has(input:checked))[disabled] {
      @include md.set-tokens(
        map.get($switch-tokens, 'unchecked', 'disabled'),
        'switch-unchecked-disabled'
      );
    }

    &:has(input:checked)[disabled] {
      @include md.set-tokens(
        map.get($switch-tokens, 'checked', 'disabled'),
        'switch-checked-disabled'
      );
    }

    &:has(input:indeterminate)[disabled] {
      @include md.set-tokens(
        map.get($switch-tokens, 'indeterminate', 'disabled'),
        'switch-indeterminate-disabled'
      );
    }
  }
}

$states: ('success', 'warning', 'error');

:host {
  @include md.declare-tokens($tokens, 'md-comp-check', true);

  --_current-color: currentColor;
  position: relative;
  display: inline-flex;
  gap: 8px;
  align-items: center;
  flex-shrink: 0;
  color: var(--_color);

  input {
    appearance: none;
    position: absolute;
    inset: 4px 0 4px 4px;
    border-radius: inherit;
    outline: 0;
    cursor: pointer;
  }

  &:has(input:hover, input:focus-visible) {
    md-icon {
      --md-comp-icon-weight: var(--md-ref-typeface-weight-bold);
    }
  }

  .track,
  .handle {
    display: contents;
  }

  .container {
    position: relative;
    width: 40px;
    height: 40px;
    margin: 4px;
    border-radius: var(--_border-radius);
    display: inline-flex;
    justify-content: center;
    align-items: center;
  }

  .track {
    position: relative;
    border-radius: var(--md-sys-shape-full);
    flex-shrink: 0;
  }

  .container,
  .handle {
    border-radius: inherit;
  }

  ::ng-deep [mdCheckIcon] {
    display: none;
  }

  &:not(:has(input:checked)) {
    --_color: var(--_color-unchecked);

    @each $state in $states {
      &[state='#{$state}'] {
        --_color: var(--_color-#{$state});
      }
    }

    ::ng-deep [mdCheckIcon='unchecked'] {
      display: inline-flex;
    }

    &:has(::ng-deep [mdCheckIcon='unchecked']) .icon {
      display: none;
    }
  }

  &:has(input:checked) {
    --_color: var(--_color-checked);

    ::ng-deep md-icon {
      --md-comp-icon-filled: 1;
    }

    @each $state in $states {
      &[state='#{$state}'] {
        --_color: var(--_color-#{$state});
      }
    }

    ::ng-deep [mdCheckIcon='checked'] {
      display: inline-flex;
    }
    &:has(::ng-deep [mdCheckIcon='checked']) .icon {
      display: none;
    }
  }

  &:has(input:indeterminate):not([type='radio']) {
    --_color: var(--_color-indeterminate);

    md-icon {
      --md-comp-icon-filled: 1;
    }

    @each $state in $states {
      &[state='#{$state}'] {
        --_color: var(--_color-#{$state});
      }
    }

    ::ng-deep [mdCheckIcon] {
      display: none;
    }

    ::ng-deep [mdCheckIcon='indeterminate'] {
      --md-comp-icon-filled: 1;
      display: inline-flex;
    }
    &:has(::ng-deep [mdCheckIcon='indeterminate']) .icon {
      display: none;
    }
  }

  md-tint {
    --md-comp-tint-color: var(--_current-color);
    --md-comp-tint-transform: scale(0);
    --md-comp-tint-transform-hover: scale(1);
  }
  md-ripple {
    --md-comp-ripple-color: var(--_current-color);
  }

  .icon,
  [mdCheckIcon] {
    object-fit: cover;
  }

  &:not(.switch) {
    .icon,
    ::ng-deep [mdCheckIcon] {
      --md-comp-icon-size: 24;
      width: 24px;
      height: 24px;
      object-fit: cover;
    }
  }

  &[switch] {
    .container {
      @include md.motion('margin-inline-start');
    }

    .handle {
      @include md.motion('width, height, background-color, color');
    }

    .icon {
      display: none;
    }

    ::ng-deep [mdCheckIcon] {
      --md-comp-icon-size: 16;
      width: 16px;
      height: 16px;
      object-fit: cover;
    }

    .track {
      display: inline-flex;
      width: 52px;
      height: 32px;
      background-color: var(--_track-background-color);
      border: 2px solid var(--_track-border-color);
      align-items: center;
      @include md.motion('border, background-color, color');
    }

    .container {
      position: absolute;
    }

    .handle {
      width: 16px;
      height: 16px;
      display: inline-flex;
      background-color: var(--_handle-background-color);
      color: var(--_handle-color);
      justify-content: center;
      align-items: center;
    }

    $switch-tokens: map.get($tokens, 'switch');
    &:not(:has(input:checked)) {
      @include md.set-tokens(
        map.get($switch-tokens, 'unchecked'),
        'switch-unchecked'
      );

      @each $state in $states {
        &[state='#{$state}'] {
          @include md.set-tokens(
            map.get(map.get($switch-tokens, 'unchecked'), $state),
            'switch-unchecked-#{$state}'
          );
        }
      }

      .container {
        margin-inline-start: -6px;
      }

      &:has(::ng-deep [mdCheckIcon='unchecked']) {
        .handle {
          width: 24px;
          height: 24px;
        }
      }

      &:active {
        .handle {
          width: 28px;
          height: 28px;
        }
      }
    }

    &:has(input:checked) {
      @include md.set-tokens(
        map.get($switch-tokens, 'checked'),
        'switch-checked'
      );

      @each $state in $states {
        &[state='#{$state}'] {
          @include md.set-tokens(
            map.get(map.get($switch-tokens, 'checked'), $state),
            'switch-checked-#{$state}'
          );
        }
      }

      .container {
        margin-inline-start: 14px;
      }

      .handle {
        width: 24px;
        height: 24px;
      }

      &:active {
        .handle {
          width: 28px;
          height: 28px;
        }
      }
    }

    &:has(input:indeterminate):not([type='radio']) {
      @include md.set-tokens(
        map.get($switch-tokens, 'indeterminate'),
        'switch-indeterminate'
      );

      @each $state in $states {
        &[state='#{$state}'] {
          @include md.set-tokens(
            map.get(map.get($switch-tokens, 'indeterminate'), $state),
            'switch-indeterminate-#{$state}'
          );
        }
      }

      .container {
        margin-inline-start: 4px;
      }

      .handle {
        width: 16px;
        height: 16px;
      }

      &:has(::ng-deep [mdCheckIcon='indeterminate']) {
        .handle {
          width: 24px;
          height: 24px;
        }
      }

      &:active {
        .handle {
          width: 24px;
          height: 24px;
        }
      }
    }
  }

  @include disabled;
}
