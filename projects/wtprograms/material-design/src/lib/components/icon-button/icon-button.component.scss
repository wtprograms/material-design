@use '../md';
@use 'sass:map';

$tokens: (
  'color': var(--md-sys-color-surface-variant-on),
  'background-color': transparent,
  'icon-filled': 0,
  'disabled': (
    'color': var(--md-sys-color-disabled-color),
  ),
  'selected': (
    'color': var(--md-sys-color-primary),
    'background-color': transparent,
    'icon-filled': 1,
    'disabled': (
      'color': var(--md-sys-color-disabled-color),
    ),
  ),
  'standard': (
    'color': var(--md-sys-color-surface-variant-on),
    'border-radius': var(--md-sys-shape-full),
    'tint-transform': (
      '': scale(0),
      'hover': scale(1),
    ),
    'disabled': (
      'color': var(--md-sys-color-disabled-color),
    ),
    'selected': (
      'color': var(--md-sys-color-primary),
      'disabled': (
        'color': var(--md-sys-color-disabled-color),
      ),
    ),
  ),
  'filled': (
    'color': var(--md-sys-color-primary),
    'background-color': var(--md-sys-color-surface-container-low),
    'border-radius': var(--md-sys-shape-full),
    'tint-transform': (
      '': scale(0),
      'hover': scale(1),
    ),
    'disabled': (
      'color': var(--md-sys-color-disabled-color),
      'background-color': var(--md-sys-color-disabled-background),
    ),
    'selected': (
      'color': var(--md-sys-color-primary-on),
      'background-color': var(--md-sys-color-primary),
      'disabled': (
        'color': var(--md-sys-color-disabled-color),
        'background-color': var(--md-sys-color-disabled-background),
      ),
    ),
  ),
  'tonal': (
    'color': var(--md-sys-color-surface-variant-on),
    'background-color': var(--md-sys-color-surface-container-low),
    'border-radius': var(--md-sys-shape-full),
    'tint-transform': (
      '': scale(0),
      'hover': scale(1),
    ),
    'disabled': (
      'color': var(--md-sys-color-disabled-color),
      'background-color': var(--md-sys-color-disabled-background),
    ),
    'selected': (
      'color': var(--md-sys-color-secondary-container-on),
      'background-color': var(--md-sys-color-secondary-container),
      'disabled': (
        'color': var(--md-sys-color-disabled-color),
        'background-color': var(--md-sys-color-disabled-background),
      ),
    ),
  ),
  'outlined': (
    'color': var(--md-sys-color-surface-variant-on),
    'border': 0.0625rem solid var(--md-sys-color-outline),
    'border-radius': var(--md-sys-shape-full),
    'tint-transform': (
      '': scale(0),
      'hover': scale(1),
    ),
    'disabled': (
      'color': var(--md-sys-color-disabled-color),
      'border': 0.0625rem solid var(--md-sys-color-disabled-border),
    ),
    'selected': (
      'color': var(--md-sys-color-surface-inverse-on),
      'background-color': var(--md-sys-color-surface-inverse),
      'border': 0.0625rem solid var(--md-sys-color-outline),
      'disabled': (
        'color': var(--md-sys-color-disabled-color),
        'background-color': var(--md-sys-color-disabled-background),
        'border': 0.0625rem solid var(--md-sys-color-disabled-border),
      ),
    ),
  ),
);

$variants: ('standard', 'filled', 'tonal', 'outlined');

:host {
  @include md.declare-tokens($tokens, 'md-comp-icon-button', true);
  @include md.declare-tokens($tokens, '_');
  --_current-color: currentColor;

  &[disabled] {
    @include md.set-tokens(map.get($tokens, 'disabled'), 'disabled');

    md-badge {
      display: none;
    }
    
    img {
      opacity: 0.5;
    }
  }

  &[selected] {
    @include md.set-tokens(map.get($tokens, 'selected'), 'selected');

    &[disabled] {
      @include md.set-tokens(
        map.get(map.get($tokens, 'selected'), 'disabled'),
        'selected-disabled'
      );
    }
  }

  @each $variant in $variants {
    $variant-tokens: map.get($tokens, $variant);

    &[variant='#{$variant}'] {
      @include md.set-tokens($variant-tokens, $variant);

      &[disabled] {
        @include md.set-tokens(
          map.get($variant-tokens, 'disabled'),
          '#{$variant}-disabled'
        );
      }

      &[selected] {
        @include md.set-tokens(
          map.get($variant-tokens, 'selected'),
          '#{$variant}-selected'
        );

        &[disabled] {
          @include md.set-tokens(
            map.get(map.get($variant-tokens, 'selected'), 'disabled'),
            '#{$variant}-selected-disabled'
          );
        }
      }
    }
  }

  --_current-color: currentColor;
  position: relative;
  display: inline-flex;
  border-radius: var(--_border-radius);
  background-color: var(--_background-color);
  border: var(--_border);
  color: var(--_color);
  height: 2.5rem;
  width: 2.5rem;
  text-wrap: nowrap;
  justify-content: center;
  align-items: center;
  appearance: none;
  outline: none;
  user-select: none;
  flex-shrink: 0;
  @include md.typescale('label', 'large');
  @include md.motion('background-color, color, border');

  &:has(> [mdEmbeddedButton]:hover, > [mdEmbeddedButton]:focus-visible) {
    md-icon {
      --md-comp-icon-weight: var(--md-ref-typeface-weight-bold);
    }
  }

  md-icon,
  img {
    --md-comp-icon-filled: var(--_icon-filled);
    --md-comp-icon-size: 1.5;
    width: 1.5rem;
    height: 1.5rem;
  }

  md-tint {
    --md-comp-tint-color: var(--_current-color);
    --md-comp-tint-transform: var(--_tint-transform);
    --md-comp-tint-transform-hover: var(--_tint-transform-hover);
  }
  md-ripple {
    --md-comp-ripple-color: var(--_current-color);
  }
  md-progress-indicator[variant='circular'] {
    --md-comp-progress-indicator-color: var(--_current-color);
    --md-comp-progress-indicator-size: 28;
    --md-comp-progress-indicator-width: 8;
    position: absolute;
  }

  &:has(md-progress-indicator) {
    pointer-events: none;
    [mdEmbeddedButton] {
      color: transparent;
    }
  }
}
