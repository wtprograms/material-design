@use '../md';
@use 'sass:map';

$tokens: (
  'color': var(--md-sys-color-surface-variant-on),
  'label': (
    'color': var(--md-sys-color-surface-variant-on),
    'font': (
      '': var(--md-sys-typescale-body-large-font),
      'weight': var(--md-sys-typescale-body-large-weight),
      'size': var(--md-sys-typescale-body-large-size),
      'line-height': var(--md-sys-typescale-body-large-line-height),
      'letter-spacing': var(--md-sys-typescale-body-large-tracking),
    ),
  ),
  'border-color': var(--md-sys-color-outline),
  'leading-color': var(--md-sys-color-surface-variant-on),
  'trailing-color': var(--md-sys-color-surface-variant-on),
  'footer-color': var(--md-sys-color-surface-variant-on),
  'indicator-color': var(--md-sys-color-primary),
  'success': (
    'indicator-color': var(--md-sys-color-success),
  ),
  'warning': (
    'indicator-color': var(--md-sys-color-warning),
  ),
  'error': (
    'indicator-color': var(--md-sys-color-danger),
  ),
  'populated': (
    'label-font': (
      '': var(--md-sys-typescale-label-small-font),
      'weight': var(--md-sys-typescale-label-small-weight),
      'size': var(--md-sys-typescale-label-small-size),
      'line-height': var(--md-sys-typescale-label-small-line-height),
      'letter-spacing': var(--md-sys-typescale-label-small-tracking),
    ),
  ),
);

:host {
  @include md.declare-tokens($tokens, 'md-comp-field', true);

  &[state='success'] {
    @include md.set-tokens(map.get($tokens, 'success'), 'success');
    &:hover {
      --_indicator-color: #{md.mix(
          var(--md-comp-field-success-indicator-color),
          var(--md-sys-color-surface-on),
          0.2
        )};
    }
  }

  &[state='warning'] {
    @include md.set-tokens(map.get($tokens, 'warning'), 'warning');
    &:hover {
      --_indicator-color: #{md.mix(
          var(--md-comp-field-warning-indicator-color),
          var(--md-sys-color-surface-on),
          0.2
        )};
    }
  }

  &[state='error'] {
    @include md.set-tokens(map.get($tokens, 'error'), 'error');
    &:hover {
      --_indicator-color: #{md.mix(
          var(--md-comp-field-error-indicator-color),
          var(--md-sys-color-surface-on),
          0.2
        )};
    }
  }

  &[state],
  &[populated] {
    --_label-color: var(--_indicator-color);
    --_border-color: var(--_indicator-color);
    --_footer-color: var(--_indicator-color);
    --_trailing-color: var(--_indicator-color);
  }

  &[populated] {
    @include md.set-tokens(map.get($tokens, 'populated'), 'populated');
  }

  display: inline-flex;
  flex-direction: column;
  gap: 0.25rem;
  min-width: 12.5rem;
  outline: none;
  user-select: none;

  .field-body {
    display: inline-flex;
    position: relative;
    min-height: 3.5rem;
    padding-inline: 1rem;
    gap: 1rem;
    color: var(--_color);
    user-select: none;
  }

  .leading {
    display: none;
  }

  ::ng-deep img {
    height: 1.5rem;
  }

  ::ng-deep [mdFieldLeading] {
    --md-comp-icon-size: 1.5;
    color: var(--_leading-color);
    margin-top: 1rem;
  }

  &:has(::ng-deep [mdFieldLeading]) {
    .leading {
      display: inline-flex;
    }

    .field-body {
      padding-inline-start: 0.75rem;
    }
  }

  ::ng-deep [mdFieldTrailing] {
    --md-comp-icon-size: 1.5;
    color: var(--_trailing-color);
    margin-top: 1rem;
  }

  &:has(::ng-deep [mdFieldTrailing]) {
    > .field-body {
      padding-inline-end: 0.75rem;
    }
  }

  .border-top-start,
  .border-top-end,
  .border-bottom,
  .border-start,
  .border-end {
    position: absolute;
    display: none;
    inset: 0;
    pointer-events: none;
  }

  .label-small {
    pointer-events: none;
    position: absolute;
    opacity: 0;
    z-index: -1;

    @include md.typescale('label', 'small');
  }

  .label {
    position: absolute;
    pointer-events: none;
    color: var(--_label-color);
    font-family: var(--_label-font);
    font-weight: var(--_label-font-weight);
    font-size: var(--_label-font-size);
    line-height: var(--_label-font-line-height);
    letter-spacing: var(--_label-font-letter-spacing);
    top: 0;
    inset-inline-start: 0;
    top: 1rem;

    @include md.motion(
      'color, font-family, font-size, top, inset-inline-start'
    );
  }

  .content {
    display: inline-flex;
    padding-top: 1rem;
    padding-bottom: 0.25rem;
    width: 100%;
    user-select: none;

    @include md.typescale('body', 'large');
    @include md.motion('padding-top, opacity');
  }

  &:hover ::ng-deep md-icon[mdFieldLeading] {
    --md-comp-icon-weight: var(--md-ref-typeface-weight-bold);
  }

  ::ng-deep md-icon-button[mdFieldLeading],
  ::ng-deep md-icon-button[mdFieldTrailing],
  ::ng-deep button[mdFieldLeading],
  ::ng-deep button[mdFieldTrailing],
  ::ng-deep md-button[mdFieldLeading],
  ::ng-deep md-button[mdFieldTrailing] {
    margin-top: 0.5rem;
  }

  .control {
    display: inline-flex;
    position: relative;
    align-items: flex-start;
    flex-grow: 1;
    user-select: none;
  }

  .footer {
    display: none;
    padding-inline: 1rem;
    gap: 1rem;
    color: var(--_footer-color);

    @include md.typescale('body', 'small');
  }

  &:has(.supporting-text, .counter, ::ng-deep md-field-supporting-text) .footer {
    display: inline-flex;
  }

  ::ng-deep md-field-supporting-text,
  .supporting-text {
    flex-grow: 1;
  }

  &:has(.label) .content {
    opacity: 0;
  }

  &[variant='filled'] {
    .field-body {
      border-radius: var(--md-sys-shape-extra-small-top);
      background-color: var(--md-sys-color-surface-container-highest);
    }

    .border-bottom {
      display: block;
      border-bottom: 0.0625rem solid var(--_border-color);
      @include md.motion('border-bottom');

      &::after {
        content: '';
        background-color: var(--_border-color);
        height: 0.0625rem;
        transform: scaleX(0);
        position: absolute;
        inset: auto 0 0 0;
        border: 0;
        @include md.motion('background-color, transform');
      }
    }

    &[populated] {
      .border-bottom::after {
        height: 0.0625rem;
        transform: scaleX(1);
      }

      &:has(.label) {
        .label {
          top: 0.625rem;
        }

        .content {
          padding-top: 1.375rem;
          opacity: 1;
        }
      }
    }
  }

  &[variant='outlined'] {
    --_border-width: 0.0625rem;
    .field-body {
      border-radius: var(--md-sys-shape-extra-small);
    }

    .border-top-start,
    .border-top-end,
    .border-bottom,
    .border-start,
    .border-end {
      display: block;
      border-color: var(--_border-color);
      border-radius: inherit;
    }

    .border-bottom {
      border-bottom-style: solid;
      border-bottom-width: var(--_border-width);
    }

    .border-start {
      border-inline-start-style: solid;
      border-inline-start-width: var(--_border-width);
    }

    .border-end {
      border-inline-end-style: solid;
      border-inline-end-width: var(--_border-width);
    }

    .border-top-start {
      border-top-style: solid;
      border-top-width: var(--_border-width);
      width: 0.75rem;
      border-start-end-radius: 0;
    }

    .border-top-end {
      border-top-style: solid;
      border-top-width: var(--_border-width);
      border-start-start-radius: 0;
      margin-inline-start: 0.75rem;
      @include md.motion('margin-inline-start');
    }

    &[populated] {
      --_border-width: 0.125rem;

      .label {
        top: -0.4375rem;
      }

      .content {
        opacity: 1;
      }
    }
  }

  .counter {
    margin-inline-start: auto;
  }

  ::ng-deep md-popover > md-list {
    max-height: 15.625rem;
    overflow-y: auto;
  }
}
