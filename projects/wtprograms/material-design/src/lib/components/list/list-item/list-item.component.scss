@use '../../md';
@use 'sass:map';

$tokens: (
  'color': var(--md-sys-color-surface-on),
  'supporting-text-color': var(--md-sys-color-surface-variant-on),
  'padding': 0.5rem 1rem,
  'icon-filled': 0,
  'disabled': (
    'color': var(--md-sys-color-disabled-color),
    'supporting-text-color': var(--md-sys-color-disabled-color),
  ),
  'selected': (
    'color': var(--md-sys-color-secondary-container-on),
    'supporting-text-color': var(--md-sys-color-secondary-container-on),
    'background-color': var(--md-sys-color-secondary-container),
    'icon-filled': 1,
    'disabled': (
      'background-color': var(--md-sys-color-disabled-background),
      'supporting-text-color': var(--md-sys-color-disabled-color),
      'color': var(--md-sys-color-disabled-color),
    ),
  ),
);

:host {
  @include md.declare-tokens($tokens, 'md-comp-list-item', true);
  &[disabled] {
    @include md.set-tokens(map.get($tokens, 'disabled'), 'disabled');

    img {
      opacity: 0.5;
    }
  }

  &[selected] {
    $selected: map.get($tokens, 'selected');
    @include md.set-tokens($selected, 'selected');

    &[disabled] {
      @include md.set-tokens(map.get($selected, 'disabled'), 'disabled');
    }
  }

  &:has(> ::ng-deep [mdEmbeddedButton]:hover, > ::ng-deep [mdEmbeddedButton]:focus-visible) {
    md-icon:not(::ng-deep [mdListItemTrailing]) {
      --md-comp-icon-weight: var(--md-ref-typeface-weight-bold);
    }
  }

  --_current-color: currentColor;
  position: relative;
  display: inline-flex;
  background-color: var(--_background-color);
  color: var(--_color);
  justify-content: flex-start;
  align-items: center;
  appearance: none;
  outline: none;
  padding: var(--_padding);
  gap: 1rem;
  text-align: start;
  flex-grow: 1;
  min-height: 3rem;
  @include md.typescale('body', 'large');
  @include md.motion('background-color, color, border, box-shadow');

  [mdEmbeddedButton] {
    flex-grow: 1;
  }

  ::ng-deep {
    > md-icon, > [mdEmbeddedButton] > md-icon {
      --md-comp-icon-size: 1.5;
    }

    [mdListItemTrailing] {
      margin-inline-start: auto;
    }
  }

  img {
    width: 3.5rem;
    height: 3.5rem;
    object-fit: cover;
  }

  &[large]:has(img) {
    --_padding: 0.75rem 1rem 0.75rem 0;
    img {
      width: auto;
      max-height: 4rem;
    }
  }

  &[top] {
    align-items: flex-start;
  }

  .content {
    display: inline-flex;
    flex-direction: column;
    align-items: flex-start;
  }

  ::ng-deep md-list-item-supporting-text {
    color: var(--_supporting-text-color);
  }

  md-icon:not(::ng-deep [mdListItemTrailing]) {
    --md-comp-icon-filled: var(--_icon-filled);
  }

  md-check {
    --md-comp-check-switch-unchecked-track-background-color: transparent;
  }

  &:not([split]) {
    [mdListItemTrailing],
    ::ng-deep md-check,
    ::ng-deep md-icon-button,
    md-badge {
      margin-inline-start: auto;
    }
  }

  &[split]:not([top]) {
    [mdListItemTrailing],
    ::ng-deep md-check,
    ::ng-deep md-icon-button,
    md-badge {
      align-self: center;
    }
  }

  &[interactive]:not([split]) {
    [mdListItemTrailing],
    ::ng-deep md-check,
    ::ng-deep md-icon-button,
    md-badge {
      md-ripple {
        opacity: 0;
      }
    }
  }

  .split {
    display: inline-flex;
    gap: 1rem;
    margin-inline-start: auto;
    height: 100%;
  }

  md-ripple {
    --md-comp-ripple-color: var(--_current-color);
  }
}
